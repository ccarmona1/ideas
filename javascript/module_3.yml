id: 3
title: "Node.js Internals y Arquitecturas de Alto Rendimiento"
topics:
  - number: 1
    completed: false
    name: "Arquitectura Interna de Node.js"
    subtopics:
      - id: 3.1.1
        name: "V8 Engine en Node.js"
        completed: false
        suggested_practice:
          - "Comparar el rendimiento de código JavaScript en Node.js vs. navegador."
      - id: 3.1.2
        name: "libuv (Thread Pool para operaciones de E/S, I/O Bound vs. CPU Bound)"
        completed: false
        suggested_practice:
          - "Simular operaciones I/O bound y CPU bound y analizar el uso del thread pool."
      - id: 3.1.3
        name: "node-addon-api / N-API (creación y uso de addons nativos de C++)"
        completed: false
        suggested_practice:
          - "Crear un addon nativo simple en C++ y consumirlo desde Node.js."
      - id: 3.1.4
        name: "Zero-Cost Abstractions, WebAssembly y Node.js Native Modules"
        completed: false
        suggested_practice:
          - "Investigar cómo Node.js implementa módulos nativos y sus ventajas de rendimiento."
  - number: 2
    completed: false
    name: "Event Loop en Node.js (Profundo)"
    subtopics:
      - id: 3.2.1
        name: "Fases del Event Loop (timers, pending callbacks, poll, check, close callbacks)"
        completed: false
        suggested_practice:
          - "Visualizar el flujo de tareas en cada fase del event loop usando ejemplos prácticos."
      - id: 3.2.2
        name: "Diferencias Clave con el Event Loop del Navegador"
        completed: false
        suggested_practice:
          - "Comparar el orden de ejecución de tareas en Node.js y navegador."
      - id: 3.2.3
        name: "process.nextTick() vs. setImmediate() vs. setTimeout(): Orden de ejecución y casos de uso"
        completed: false
        suggested_practice:
          - "Crear ejemplos que mezclen estas APIs y predecir el orden de ejecución."
      - id: 3.2.4
        name: "Timers Phase Internals y optimización de callbacks"
        completed: false
        suggested_practice:
          - "Medir el impacto de callbacks pesados en la fase de timers."
  - number: 3
    completed: false
    name: "Manejo de Errores Asíncronos en Node.js"
    subtopics:
      - id: 3.3.1
        name: "unhandledRejection, uncaughtException"
        completed: false
        suggested_practice:
          - "Provocar y capturar errores asíncronos y analizar el flujo de manejo."
      - id: 3.3.2
        name: "Error boundaries y patrones de resiliencia"
        completed: false
        suggested_practice:
          - "Implementar un patrón de error boundary en una app Node.js."
  - number: 4
    completed: false
    name: "Módulos Avanzados de Node.js y Patrones"
    subtopics:
      - id: 3.4.1
        name: "child_process (spawn, fork, exec, comunicación entre procesos)"
        completed: false
        suggested_practice:
          - "Crear un proceso hijo y comunicar datos entre procesos."
      - id: 3.4.2
        name: "cluster Module (escalamiento horizontal, workers)"
        completed: false
        suggested_practice:
          - "Escalar un servidor HTTP usando el módulo cluster."
      - id: 3.4.3
        name: "worker_threads (hilos para operaciones CPU-bound, comunicación)"
        completed: false
        suggested_practice:
          - "Mover una tarea CPU-bound a un worker thread y medir el impacto."
          - "Comparar worker_threads de Node.js con Web Workers y Service Workers del navegador: diferencias de API, casos de uso, limitaciones y advertencias de interoperabilidad."
        notes:
          - "Diferencias clave: worker_threads en Node.js permiten acceso completo al sistema y están orientados a tareas CPU-bound, mientras que Web Workers están limitados al entorno seguro del navegador. Service Workers tienen un ciclo de vida especial y están enfocados en interceptar y gestionar peticiones de red en aplicaciones web."
          - "Advertencia: No confundir los modelos de concurrencia y comunicación entre procesos/hilos en Node.js y navegador. Analizar las mejores prácticas y limitaciones de cada entorno."
      - id: 3.4.4
        name: "Stream API (Readable, Writable, Duplex, Transform Streams, Backpressure)"
        completed: false
        suggested_practice:
          - "Procesar archivos grandes usando streams y manejar backpressure."
      - id: 3.4.5
        name: "Buffer y Typed Arrays"
        completed: false
        suggested_practice:
          - "Manipular binarios usando Buffer y Typed Arrays."
      - id: 3.4.6
        name: "Native Streams vs. Userland Streams"
        completed: false
        suggested_practice:
          - "Comparar streams nativos y de usuario en Node.js."
      - id: 3.4.7
        name: "Diferencia entre .pipe() y .pipeline() en Node.js Streams"
        completed: false
        suggested_practice:
          - "Implementar ejemplos prácticos usando .pipe() y .pipeline(), mostrando diferencias en manejo de errores y composición de streams."
        notes:
          - ".pipe() permite encadenar streams de forma sencilla pero no maneja correctamente los errores en cadenas largas. .pipeline() (desde Node.js v10) gestiona el cierre y propagación de errores de forma robusta y es la opción recomendada para flujos complejos."
  - number: 5
    completed: false
    name: "Optimizaciones de Rendimiento y Debugging en Node.js"
    subtopics:
      - id: 3.5.1
        name: "Profiling (perf_hooks, Chrome DevTools)"
        completed: false
        suggested_practice:
          - "Usar perf_hooks y DevTools para identificar cuellos de botella."
      - id: 3.5.2
        name: "Análisis de Memoria (Heap snapshots, detección de fugas)"
        completed: false
        suggested_practice:
          - "Tomar y analizar heap snapshots para detectar fugas."
      - id: 3.5.3
        name: "Benchmarking (autocannon, wrk)"
        completed: false
        suggested_practice:
          - "Comparar el rendimiento de dos implementaciones usando autocannon."
      - id: 3.5.4
        name: "Manejo de Errores y Logging Avanzado (Pino, Winston)"
        completed: false
        suggested_practice:
          - "Configurar Pino o Winston para logging estructurado."
      - id: 3.5.5
        name: "Thread-safe patterns y race conditions"
        completed: false
        suggested_practice:
          - "Simular race conditions y aplicar patrones thread-safe."
  - number: 6
    completed: false
    name: "Contenedorización (Docker) y Orquestación (Kubernetes) para Aplicaciones Node.js"
    subtopics:
      - id: 3.6.1
        name: "Dockerfile para Node.js y optimización de imágenes"
        completed: false
        suggested_practice:
          - "Crear un `Dockerfile` optimizado para una aplicación Node.js, utilizando imágenes base apropiadas (`node:lts-alpine`)."
          - "Implementar `multi-stage builds` para reducir el tamaño de la imagen final, separando las dependencias de desarrollo y producción."
          - "Configurar variables de entorno, volúmenes y user/group en el `Dockerfile` para seguridad y configurabilidad."
      - id: 3.6.2
        name: "Gestión avanzada de dependencias en entornos conteinerizados"
        completed: false
        suggested_practice:
          - "Comparar el uso de `npm ci` vs `npm install` en un entorno Docker para builds reproducibles."
          - "Implementar estrategias de caching (Docker build cache, multi-stage builds) para las dependencias de Node.js en Docker."
          - "Optimizar el proceso de instalación de dependencias para reducir el tiempo de construcción de la imagen, considerando `COPY --from`."
      - id: 3.6.3
        name: "Configuración de Kubernetes para aplicaciones Node.js"
        completed: false
        suggested_practice:
          - "Desplegar una aplicación Node.js en un cluster de Kubernetes (Minikube, Kind, GKE, EKS)."
          - "Definir `Deployments`, `Services`, y `Ingresses` para la aplicación, exponiendo puertos y rutas."
          - "Configurar `liveness` y `readiness probes` para asegurar la salud de los pods de la aplicación y manejar reinicios/despliegues."
          - "Implementar `Horizontal Pod Autoscaler` (HPA) para escalado automático basado en métricas."
      - id: 3.6.4
        name: "Consideraciones de rendimiento y recursos en contenedores"
        completed: false
        suggested_practice:
          - "Ajustar los límites de CPU y memoria (`requests` y `limits`) para contenedores de Node.js en Kubernetes y observar su impacto."
          - "Analizar el impacto del sistema de archivos y las operaciones de E/S en el rendimiento de la aplicación conteinerizada."
          - "Optimizar la configuración de recursos para maximizar la eficiencia y prevenir `OOMKilled`."
      - id: 3.6.5
        name: "Patrones Serverless Avanzados para Node.js"
        completed: false
        suggested_practice:
          - "Desplegar una función Node.js en un proveedor Serverless (AWS Lambda, Google Cloud Functions, Azure Functions) utilizando TypeScript."
          - "Implementar estrategias para mitigar y manejar `cold starts` en funciones serverless (ej. provisioned concurrency, mantener lambdas 'calientes')."
          - "Configurar eventos y triggers complejos para funciones serverless (API Gateway, SQS, S3, DynamoDB Streams)."
  - number: 7
    completed: false
    name: "Seguridad en Aplicaciones Node.js"
    subtopics:
      - id: 3.7.1
        name: "Vulnerabilidades Comunes (Inyección SQL, XSS, CSRF)"
        completed: false
        suggested_practice:
          - "Simular ataques comunes y aplicar mitigaciones."
      - id: 3.7.2
        name: "Protección con Helmet.js"
        completed: false
        suggested_practice:
          - "Integrar Helmet.js y analizar los headers de seguridad."
      - id: 3.7.3
        name: "Autenticación/Autorización Avanzadas (JWT, OAuth 2.0, OpenID Connect)"
        completed: false
        suggested_practice:
          - "Implementar autenticación JWT y OAuth en una API."
      - id: 3.7.4
        name: "Manejo Seguro de Secretos"
        completed: false
        suggested_practice:
          - "Configurar variables de entorno seguras y rotación de secretos."
      - id: 3.7.5
        name: "Seguridad en dependencias (npm audit, Snyk, supply chain attacks)"
        completed: false
        suggested_practice:
          - "Auditar dependencias y corregir vulnerabilidades reportadas."
