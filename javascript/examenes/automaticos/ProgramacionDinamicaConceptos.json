[{"id":"q1","question":"¿Cuál es uno de los conceptos fundamentales de la Programación Dinámica?","options":["a) Memorización","b) Fuerza bruta","c) Iteración simple","d) Ordenamiento de datos"],"answer":"a","explanation":"La memorización es un concepto clave en Programación Dinámica, donde se almacenan los resultados de subproblemas ya resueltos para evitar recalculaciones.","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"La fuerza bruta es un enfoque opuesto a la Programación Dinámica, ya que intenta todas las posibles soluciones sin optimización.","c":"La iteración simple es un concepto muy general en programación y no es específico de la Programación Dinámica como una de sus bases fundamentales.","d":"El ordenamiento de datos puede ser parte de la preparación para algunos problemas, pero no es un concepto fundamental de la Programación Dinámica en sí misma."}},{"id":"q2","question":"¿Qué tipo de problemas son adecuados para ser resueltos con Programación Dinámica?","options":["a) Problemas con subproblemas superpuestos y estructura óptima","b) Problemas que solo requieren una única iteración","c) Problemas sin ninguna recurrencia","d) Problemas que solo involucran operaciones aritméticas básicas"],"answer":"a","explanation":"La Programación Dinámica es ideal para problemas que exhiben 'subproblemas superpuestos' (las mismas subproblemas se resuelven varias veces) y 'estructura de subproblemas óptima' (la solución óptima de un problema se puede construir a partir de las soluciones óptimas de sus subproblemas).","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"Los problemas que solo requieren una única iteración generalmente no necesitan Programación Dinámica, ya que son más simples.","c":"La Programación Dinámica se basa en la recurrencia y la reutilización de soluciones de subproblemas, por lo que los problemas sin recurrencia no serían adecuados.","d":"Los problemas que solo involucran operaciones aritméticas básicas son demasiado simples para requerir Programación Dinámica, a menos que sean parte de un subproblema más complejo."}},{"id":"q3","question":"¿Qué técnica se utiliza para evitar el recálculo de subproblemas en Programación Dinámica?","options":["a) Memorización","b) Backtracking","c) Dividir y Conquistar (sin memorización)","d) Búsqueda exhaustiva"],"answer":"a","explanation":"La memorización es la técnica específica de la Programación Dinámica que almacena los resultados de subproblemas resueltos para reutilizarlos y evitar cálculos redundantes.","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"Backtracking es una técnica para encontrar todas las soluciones o una solución a un problema de forma sistemática, pero no se enfoca en evitar recálculos de subproblemas de la misma manera que la memorización.","c":"Dividir y Conquistar es un paradigma algorítmico, pero sin memorización, puede llevar a recalcular los mismos subproblemas repetidamente, lo cual es lo que la Programación Dinámica busca evitar.","d":"La búsqueda exhaustiva implica revisar todas las posibilidades y no busca optimizar evitando recálculos."}},{"id":"q4","question":"¿Cuál es la diferencia principal entre el enfoque 'Top-Down' y 'Bottom-Up' en Programación Dinámica?","options":["a) Top-Down usa recursión con memorización, Bottom-Up usa iteración","b) Top-Down es siempre más eficiente que Bottom-Up","c) Bottom-Up usa recursión, Top-Down usa iteración","d) No hay diferencia significativa, son lo mismo"],"answer":"a","explanation":"El enfoque Top-Down (de arriba hacia abajo) se implementa comúnmente con recursión y memorización, mientras que el enfoque Bottom-Up (de abajo hacia arriba) se implementa con iteración, construyendo las soluciones a partir de los subproblemas más pequeños.","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"La eficiencia relativa de Top-Down y Bottom-Up puede variar dependiendo del problema y la implementación, ninguno es inherentemente siempre más eficiente.","c":"Esta opción invierte las características correctas de ambos enfoques.","d":"Aunque ambos son Programación Dinámica, su implementación y la forma en que abordan la resolución de subproblemas son fundamentalmente diferentes."}},{"id":"q5","question":"¿Qué significa 'subproblemas superpuestos' en el contexto de la Programación Dinámica?","options":["a) Que el mismo subproblema se resuelve múltiples veces","b) Que los subproblemas no tienen relación entre sí","c) Que los subproblemas son demasiado grandes para resolverlos","d) Que solo se necesita resolver un subproblema para encontrar la solución final"],"answer":"a","explanation":"Los 'subproblemas superpuestos' se refieren a la característica de que, al descomponer un problema en subproblemas, algunos de estos subproblemas son idénticos y se encuentran varias veces en el árbol de recursión.","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"Para que la Programación Dinámica sea aplicable, debe haber una relación y dependencia entre los subproblemas.","c":"La Programación Dinámica está diseñada para manejar problemas que, aunque grandes en su conjunto, se pueden dividir en subproblemas manejables.","d":"Si solo se necesita resolver un subproblema, el problema original sería trivial y no requeriría Programación Dinámica."}},{"id":"q6","question":"¿Cuál de los siguientes problemas es un ejemplo clásico donde se aplica la Programación Dinámica?","options":["a) La secuencia de Fibonacci","b) Ordenamiento de burbuja","c) Búsqueda binaria","d) Inserción en una lista enlazada"],"answer":"a","explanation":"La secuencia de Fibonacci es un ejemplo canónico de Programación Dinámica, donde el cálculo de un número de Fibonacci requiere los dos anteriores, lo que lleva a subproblemas superpuestos si no se usa memorización.","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"El ordenamiento de burbuja es un algoritmo de ordenamiento simple que no utiliza Programación Dinámica.","c":"La búsqueda binaria es un algoritmo de búsqueda eficiente que no utiliza Programación Dinámica.","d":"La inserción en una lista enlazada es una operación básica de estructura de datos que no aplica conceptos de Programación Dinámica."}},{"id":"q7","question":"¿Qué tabla o estructura de datos se suele usar para almacenar los resultados de los subproblemas en Programación Dinámica (en el enfoque Bottom-Up)?","options":["a) Una tabla (array) o matriz","b) Una pila (stack)","c) Una cola (queue)","d) Un árbol binario de búsqueda"],"answer":"a","explanation":"En el enfoque Bottom-Up, es común utilizar una tabla (un array unidimensional o una matriz bidimensional, dependiendo del problema) para almacenar y acceder a los resultados de los subproblemas resueltos.","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"Una pila es una estructura LIFO (Last-In, First-Out) que no es adecuada para el acceso directo a los resultados de subproblemas de Programación Dinámica.","c":"Una cola es una estructura FIFO (First-In, First-Out) que tampoco es adecuada para el acceso directo y la reutilización de resultados de Programación Dinámica.","d":"Un árbol binario de búsqueda es útil para búsquedas eficientes, pero no es la estructura principal para almacenar resultados de subproblemas en la Programación Dinámica."}},{"id":"q8","question":"¿Cuál es el objetivo principal de la Programación Dinámica?","options":["a) Optimizar el tiempo de ejecución al evitar cálculos repetidos","b) Maximizar el uso de memoria para almacenar todos los datos","c) Encontrar siempre la solución más sencilla, aunque no sea óptima","d) Realizar operaciones de entrada/salida de forma eficiente"],"answer":"a","explanation":"El objetivo fundamental de la Programación Dinámica es mejorar la eficiencia de los algoritmos, reduciendo el tiempo de ejecución al evitar la repetición de cálculos para subproblemas que ya han sido resueltos.","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"Aunque la Programación Dinámica usa memoria para almacenar resultados, su objetivo no es maximizar el uso de memoria, sino optimizar el tiempo a expensas de un uso razonable de memoria.","c":"La Programación Dinámica busca soluciones óptimas, no solo las más sencillas. La sencillez en la solución final puede ser una consecuencia de la optimización, pero no el objetivo principal.","d":"Las operaciones de entrada/salida eficientes no son el enfoque principal de la Programación Dinámica; su enfoque está en la eficiencia del procesamiento algorítmico."}},{"id":"q9","question":"¿Qué propiedad debe tener un problema para poder ser resuelto con Programación Dinámica?","options":["a) Principio de subestructura óptima","b) Ser no determinista","c) No tener recursión en su definición","d) Solo tener una solución posible"],"answer":"a","explanation":"El Principio de Subestructura Óptima establece que una solución óptima para un problema global puede construirse a partir de las soluciones óptimas de sus subproblemas, lo cual es esencial para la Programación Dinámica.","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"La Programación Dinámica generalmente se aplica a problemas deterministas, donde el resultado de los subproblemas es predecible.","c":"La Programación Dinámica a menudo se define recursivamente (especialmente en el enfoque Top-Down), aunque se implementa iterativamente en Bottom-Up.","d":"Muchos problemas que se resuelven con Programación Dinámica pueden tener múltiples soluciones posibles, pero la DP busca la óptima."}},{"id":"q10","question":"¿Cómo se diferencia la Programación Dinámica de los algoritmos 'Divide y Vencerás' puros?","options":["a) La Programación Dinámica almacena los resultados de subproblemas superpuestos","b) 'Divide y Vencerás' siempre usa memorización","c) La Programación Dinámica es siempre más lenta","d) 'Divide y Vencerás' no divide el problema en subproblemas"],"answer":"a","explanation":"Ambos paradigmas dividen los problemas, pero la Programación Dinámica se distingue por la característica de 'subproblemas superpuestos' y la técnica de memorización para evitar recalcularlos, algo que 'Divide y Vencerás' puro no necesariamente hace.","difficulty":"principiante","category":"Generated","invalidOptions":{"b":"Los algoritmos 'Divide y Vencerás' puros, como Mergesort, no usan memorización porque los subproblemas no se superponen.","c":"La Programación Dinámica está diseñada para ser más eficiente que los enfoques ingenuos para problemas con subproblemas superpuestos, no siempre más lenta.","d":"'Divide y Vencerás' se basa fundamentalmente en dividir el problema en subproblemas más pequeños y resolverlos independientemente."}}]