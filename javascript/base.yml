course:
  name: "Especialización Avanzada en JavaScript, TypeScript y Node.js"
  description: "Curso diseñado para ingenieros de sistemas con experiencia, enfocado en las mecánicas internas, optimización de rendimiento y arquitecturas avanzadas para lograr un dominio experto en JS, TS y Node.js."
  instruccionesIA: >
    Por cada iteración que tengas, vuelve a leer este yml en su totalidad.
    Para cada pregunta, proporciona una explicación detallada del concepto involucrado.
    Incluye ejemplos prácticos, analogías si es útil, advertencias comunes y mejores prácticas.
    Asegúrate de que la persona entienda el "por qué" y el "cómo" detrás de cada concepto.
    Siempre valida si desea una explicación más técnica o más sencilla, y adapta el lenguaje.
    Para cada tópico, genera 3 preguntas tipo examen que validen la comprensión profunda del concepto, no generes exámenes fáciles.
    Las preguntas deben ser desafiantes y requerir la aplicación o el análisis, no solo la memorización.
    Incluye una mezcla de:
      - Preguntas de opción múltiple con explicaciones detalladas para cada opción (correcta e incorrectas).
      - Preguntas de "verdadero o falso" que requieran justificación.
      - Preguntas abiertas que soliciten ejemplos de código, análisis de escenarios o explicación del "por qué".
    Asegúrate de que las preguntas abarquen diferentes aspectos del tema (funcionamiento interno, optimización, mejores prácticas, advertencias).
    Siempre proporciona la respuesta correcta y una explicación exhaustiva.
    Recuerda mencionar las prácticas sugeridas para cada subtema.
    Ignora los topics o subtopics marcados como completados.
    Tu tarea es seguir la hoja de ruta y no adelantar temas que aún no hemos cubierto
    Identifica si al tópico le hace falta contenido y sugiere que otro tema debería incluír el tópico
    Por cada término en español, incluye su traducción en inglés en paréntesis
    Incluye información adicional acerca de nuevas tecnologías o herramientas implementadas en ES6+
  target_audience:
    - "Ingeniero en Sistemas"
    - "9 años de experiencia en la industria del software"
    - "3 años de experiencia específica en JavaScript/TypeScript/Node.js"
  learning_goal: "Convertirse en un experto demostrable en estas tecnologías, capaz de diseñar, desarrollar y optimizar aplicaciones de alto rendimiento, entender el funcionamiento interno y demostrar este conocimiento en entornos profesionales exigentes y entrevistas."
  prerequisites_excluded:
    - "Variables"
    - "Ciclos"
    - "Condicionales"
    - "Conceptos básicos de programación"

  modules:
    - $include: ./modules/module_1.yml
    - $include: ./modules/module_2.yml
    - id: 3
      title: "Node.js Internals y Arquitecturas de Alto Rendimiento"
      topics:
        - number: 1
          status: "Pendiente"
          name: "Arquitectura Interna de Node.js"
          subtopics:
            - id: 3.1.1
              name: "V8 Engine en Node.js"
              status: "Pendiente"
              suggested_practice:
                - "Comparar el rendimiento de código JavaScript en Node.js vs. navegador."
            - id: 3.1.2
              name: "libuv (Thread Pool para operaciones de E/S, I/O Bound vs. CPU Bound)"
              status: "Pendiente"
              suggested_practice:
                - "Simular operaciones I/O bound y CPU bound y analizar el uso del thread pool."
            - id: 3.1.3
              name: "node-addon-api / N-API (creación y uso de addons nativos de C++)"
              status: "Pendiente"
              suggested_practice:
                - "Crear un addon nativo simple en C++ y consumirlo desde Node.js."
            - id: 3.1.4
              name: "Zero-Cost Abstractions, WebAssembly y Node.js Native Modules"
              status: "Pendiente"
              suggested_practice:
                - "Investigar cómo Node.js implementa módulos nativos y sus ventajas de rendimiento."
        - number: 2
          status: "Pendiente"
          name: "Event Loop en Node.js (Profundo)"
          subtopics:
            - id: 3.2.1
              name: "Fases del Event Loop (timers, pending callbacks, poll, check, close callbacks)"
              status: "Pendiente"
              suggested_practice:
                - "Visualizar el flujo de tareas en cada fase del event loop usando ejemplos prácticos."
            - id: 3.2.2
              name: "Diferencias Clave con el Event Loop del Navegador"
              status: "Pendiente"
              suggested_practice:
                - "Comparar el orden de ejecución de tareas en Node.js y navegador."
            - id: 3.2.3
              name: "process.nextTick() vs. setImmediate() vs. setTimeout(): Orden de ejecución y casos de uso"
              status: "Pendiente"
              suggested_practice:
                - "Crear ejemplos que mezclen estas APIs y predecir el orden de ejecución."
            - id: 3.2.4
              name: "Timers Phase Internals y optimización de callbacks"
              status: "Pendiente"
              suggested_practice:
                - "Medir el impacto de callbacks pesados en la fase de timers."
        - number: 3
          status: "Pendiente"
          name: "Manejo de Errores Asíncronos en Node.js"
          subtopics:
            - id: 3.3.1
              name: "unhandledRejection, uncaughtException"
              status: "Pendiente"
              suggested_practice:
                - "Provocar y capturar errores asíncronos y analizar el flujo de manejo."
            - id: 3.3.2
              name: "Error boundaries y patrones de resiliencia"
              status: "Pendiente"
              suggested_practice:
                - "Implementar un patrón de error boundary en una app Node.js."
        - number: 4
          status: "Pendiente"
          name: "Módulos Avanzados de Node.js y Patrones"
          subtopics:
            - id: 3.4.1
              name: "child_process (spawn, fork, exec, comunicación entre procesos)"
              status: "Pendiente"
              suggested_practice:
                - "Crear un proceso hijo y comunicar datos entre procesos."
            - id: 3.4.2
              name: "cluster Module (escalamiento horizontal, workers)"
              status: "Pendiente"
              suggested_practice:
                - "Escalar un servidor HTTP usando el módulo cluster."
            - id: 3.4.3
              name: "worker_threads (hilos para operaciones CPU-bound, comunicación)"
              status: "Pendiente"
              suggested_practice:
                - "Mover una tarea CPU-bound a un worker thread y medir el impacto."
            - id: 3.4.4
              name: "Stream API (Readable, Writable, Duplex, Transform Streams, Backpressure)"
              status: "Pendiente"
              suggested_practice:
                - "Procesar archivos grandes usando streams y manejar backpressure."
            - id: 3.4.5
              name: "Buffer y Typed Arrays"
              status: "Pendiente"
              suggested_practice:
                - "Manipular binarios usando Buffer y Typed Arrays."
            - id: 3.4.6
              name: "Native Streams vs. Userland Streams"
              status: "Pendiente"
              suggested_practice:
                - "Comparar streams nativos y de usuario en Node.js."
        - number: 5
          status: "Pendiente"
          name: "Optimizaciones de Rendimiento y Debugging en Node.js"
          subtopics:
            - id: 3.5.1
              name: "Profiling (perf_hooks, Chrome DevTools)"
              status: "Pendiente"
              suggested_practice:
                - "Usar perf_hooks y DevTools para identificar cuellos de botella."
            - id: 3.5.2
              name: "Análisis de Memoria (Heap snapshots, detección de fugas)"
              status: "Pendiente"
              suggested_practice:
                - "Tomar y analizar heap snapshots para detectar fugas."
            - id: 3.5.3
              name: "Benchmarking (autocannon, wrk)"
              status: "Pendiente"
              suggested_practice:
                - "Comparar el rendimiento de dos implementaciones usando autocannon."
            - id: 3.5.4
              name: "Manejo de Errores y Logging Avanzado (Pino, Winston)"
              status: "Pendiente"
              suggested_practice:
                - "Configurar Pino o Winston para logging estructurado."
            - id: 3.5.5
              name: "Thread-safe patterns y race conditions"
              status: "Pendiente"
              suggested_practice:
                - "Simular race conditions y aplicar patrones thread-safe."
        - number: 6
          status: "Pendiente"
          name: "Contenedorización (Docker) y Orquestación (Kubernetes) para Aplicaciones Node.js"
          subtopics:
            - id: 3.6.1
              name: "Dockerfile para Node.js y optimización de imágenes"
              status: "Pendiente"
              suggested_practice:
                - "Crear un `Dockerfile` optimizado para una aplicación Node.js, utilizando imágenes base apropiadas (`node:lts-alpine`)."
                - "Implementar `multi-stage builds` para reducir el tamaño de la imagen final, separando las dependencias de desarrollo y producción."
                - "Configurar variables de entorno, volúmenes y user/group en el `Dockerfile` para seguridad y configurabilidad."
            - id: 3.6.2
              name: "Gestión avanzada de dependencias en entornos conteinerizados"
              status: "Pendiente"
              suggested_practice:
                - "Comparar el uso de `npm ci` vs `npm install` en un entorno Docker para builds reproducibles."
                - "Implementar estrategias de caching (Docker build cache, multi-stage builds) para las dependencias de Node.js en Docker."
                - "Optimizar el proceso de instalación de dependencias para reducir el tiempo de construcción de la imagen, considerando `COPY --from`."
            - id: 3.6.3
              name: "Configuración de Kubernetes para aplicaciones Node.js"
              status: "Pendiente"
              suggested_practice:
                - "Desplegar una aplicación Node.js en un cluster de Kubernetes (Minikube, Kind, GKE, EKS)."
                - "Definir `Deployments`, `Services`, y `Ingresses` para la aplicación, exponiendo puertos y rutas."
                - "Configurar `liveness` y `readiness probes` para asegurar la salud de los pods de la aplicación y manejar reinicios/despliegues."
                - "Implementar `Horizontal Pod Autoscaler` (HPA) para escalado automático basado en métricas."
            - id: 3.6.4
              name: "Consideraciones de rendimiento y recursos en contenedores"
              status: "Pendiente"
              suggested_practice:
                - "Ajustar los límites de CPU y memoria (`requests` y `limits`) para contenedores de Node.js en Kubernetes y observar su impacto."
                - "Analizar el impacto del sistema de archivos y las operaciones de E/S en el rendimiento de la aplicación conteinerizada."
                - "Optimizar la configuración de recursos para maximizar la eficiencia y prevenir `OOMKilled`."
            - id: 3.6.5
              name: "Patrones Serverless Avanzados para Node.js"
              status: "Pendiente"
              suggested_practice:
                - "Desplegar una función Node.js en un proveedor Serverless (AWS Lambda, Google Cloud Functions, Azure Functions) utilizando TypeScript."
                - "Implementar estrategias para mitigar y manejar `cold starts` en funciones serverless (ej. provisioned concurrency, mantener lambdas 'calientes')."
                - "Configurar eventos y triggers complejos para funciones serverless (API Gateway, SQS, S3, DynamoDB Streams)."

        - number: 7
          status: "Pendiente"
          name: "Seguridad en Aplicaciones Node.js"
          subtopics:
            - id: 3.7.1
              name: "Vulnerabilidades Comunes (Inyección SQL, XSS, CSRF)"
              status: "Pendiente"
              suggested_practice:
                - "Simular ataques comunes y aplicar mitigaciones."
            - id: 3.7.2
              name: "Protección con Helmet.js"
              status: "Pendiente"
              suggested_practice:
                - "Integrar Helmet.js y analizar los headers de seguridad."
            - id: 3.7.3
              name: "Autenticación/Autorización Avanzadas (JWT, OAuth 2.0, OpenID Connect)"
              status: "Pendiente"
              suggested_practice:
                - "Implementar autenticación JWT y OAuth en una API."
            - id: 3.7.4
              name: "Manejo Seguro de Secretos"
              status: "Pendiente"
              suggested_practice:
                - "Configurar variables de entorno seguras y rotación de secretos."
            - id: 3.7.5
              name: "Seguridad en dependencias (npm audit, Snyk, supply chain attacks)"
              status: "Pendiente"
              suggested_practice:
                - "Auditar dependencias y corregir vulnerabilidades reportadas."
    - id: 4
      title: "Desarrollo de Aplicaciones Avanzadas con Node.js y TypeScript"
      topics:
        - number: 1
          status: "Pendiente"
          name: "Arquitecturas de Microservicios con Node.js y TypeScript"
          subtopics:
            - id: 4.1.1
              name: "Principios (desacoplamiento)"
              status: "Pendiente"
              suggested_practice:
                - "Diseñar un microservicio desacoplado y documentar sus dependencias."
            - id: 4.1.2
              name: "Comunicación (REST, gRPC, Message Queues)"
              status: "Pendiente"
              suggested_practice:
                - "Implementar comunicación entre servicios usando REST y gRPC."
            - id: 4.1.3
              name: "API Gateway"
              status: "Pendiente"
              suggested_practice:
                - "Configurar un API Gateway y enrutar peticiones a microservicios."
            - id: 4.1.4
              name: "Service Discovery"
              status: "Pendiente"
              suggested_practice:
                - "Simular service discovery dinámico en un entorno de microservicios."
            - id: 4.1.5
              name: "Patrones de Resiliencia (Circuit Breaker, Retries)"
              status: "Pendiente"
              suggested_practice:
                - "Implementar un patrón Circuit Breaker en Node.js."
            - id: 4.1.6
              name: "Monitoreo y Observabilidad (Prometheus, Grafana, Jaeger)"
              status: "Pendiente"
              suggested_practice:
                - "Instrumentar métricas y trazas en microservicios y visualizarlas."
            - id: 4.1.7
              name: "Event Sourcing y CQRS"
              status: "Pendiente"
              suggested_practice:
                - "Modelar un flujo de eventos y comandos usando CQRS."
            - id: 4.1.8
              name: "Mensajería asíncrona avanzada (RabbitMQ, Kafka)"
              status: "Pendiente"
              suggested_practice:
                - "Integrar RabbitMQ o Kafka para comunicación asíncrona."
        - number: 2
          status: "Pendiente"
          name: "Bases de Datos Avanzadas con Node.js"
          subtopics:
            - id: 4.2.1
              name: "ORM/ODM Profundo (TypeORM, Prisma: migraciones, relaciones, optimizaciones)"
              status: "Pendiente"
              suggested_practice:
                - "Configurar migraciones y relaciones avanzadas con TypeORM o Prisma."
            - id: 4.2.2
              name: "Bases de Datos NoSQL (MongoDB/Mongoose, Redis: caching, pub/sub)"
              status: "Pendiente"
              suggested_practice:
                - "Implementar caching y pub/sub con Redis y MongoDB."
            - id: 4.2.3
              name: "Diseño de Esquemas Eficientes"
              status: "Pendiente"
              suggested_practice:
                - "Optimizar un esquema de base de datos para consultas frecuentes."
            - id: 4.2.4
              name: "Sharding y replicación avanzada"
              status: "Pendiente"
              suggested_practice:
                - "Simular sharding y replicación en una base de datos NoSQL."
            - id: 4.2.5
              name: "Transacciones Distribuidas y Patrón Saga"
              status: "Pendiente"
              suggested_practice:
                - "Investigar los desafíos de mantener la consistencia en sistemas distribuidos con múltiples bases de datos."
                - "Implementar el patrón Saga para manejar transacciones distribuidas en una arquitectura de microservicios, utilizando un orquestador o coreografía."
                - "Diseñar e implementar mecanismos de compensación y reversión (rollbacks) para los pasos de una Saga."
                - "Analizar las implicaciones de la consistencia eventual en sistemas basados en Sagas."
        - number: 3
          status: "Pendiente"
          name: "Testing Avanzado de Aplicaciones Node.js y TypeScript"
          subtopics:
            - id: 4.3.1
              name: "Estrategias (Unit, Integration, E2E)"
              status: "Pendiente"
              suggested_practice:
                - "Diseñar pruebas unitarias, de integración y E2E para un microservicio."
            - id: 4.3.2
              name: "Frameworks de Testing (Jest, Vitest, Supertest, Cypress)"
              status: "Pendiente"
              suggested_practice:
                - "Comparar frameworks de testing en un mismo módulo."
            - id: 4.3.3
              name: "Mocks, Stubs y Spies (uso avanzado), Test Doubles"
              status: "Pendiente"
              suggested_practice:
                - "Implementar mocks y spies avanzados en pruebas de integración."
            - id: 4.3.4
              name: "Generación de Datos de Prueba (Faker.js)"
              status: "Pendiente"
              suggested_practice:
                - "Generar datos de prueba realistas con Faker.js."
            - id: 4.3.5
              name: "Test-Driven Development (TDD) y Behavior-Driven Development (BDD)"
              status: "Pendiente"
              suggested_practice:
                - "Desarrollar una funcionalidad usando TDD y BDD."
            - id: 4.3.6
              name: "Contract Testing (Pact, Dredd)"
              status: "Pendiente"
              suggested_practice:
                - "Validar contratos de APIs con Pact o Dredd."
        - number: 4
          status: "Pendiente"
          name: "GraphQL con Node.js y TypeScript"
          subtopics:
            - id: 4.4.1
              name: "Conceptos Avanzados (Schemas, Resolvers, Directives, Subscriptions)"
              status: "Pendiente"
              suggested_practice:
                - "Definir un esquema GraphQL avanzado con directivas y suscripciones."
            - id: 4.4.2
              name: "Implementación (Apollo Server/Yoga)"
              status: "Pendiente"
              suggested_practice:
                - "Implementar una API GraphQL con Apollo Server y Yoga."
            - id: 4.4.3
              name: "Federation y Stitching"
              status: "Pendiente"
              suggested_practice:
                - "Federar múltiples servicios GraphQL y usar stitching."
            - id: 4.4.4
              name: "Optimización de Rendimiento (N+1 problem, DataLoader)"
              status: "Pendiente"
              suggested_practice:
                - "Resolver el problema N+1 usando DataLoader."
            - id: 4.4.5
              name: "Persisted Queries y seguridad en GraphQL"
              status: "Pendiente"
              suggested_practice:
                - "Implementar persisted queries y analizar riesgos de seguridad."
        - number: 5
          status: "Pendiente"
          name: "Despliegue y CI/CD para Aplicaciones Node.js"
          subtopics:
            - id: 4.5.1
              name: "Estrategias de Despliegue (Blue/Green, Canary)"
              status: "Pendiente"
              suggested_practice:
                - "Simular despliegues blue/green y canary en un entorno de pruebas."
            - id: 4.5.2
              name: "CI/CD Pipelines (GitHub Actions, GitLab CI)"
              status: "Pendiente"
              suggested_practice:
                - "Configurar un pipeline CI/CD con pruebas y despliegue automático."
            - id: 4.5.3
              name: "Serverless (AWS Lambda, Azure Functions, Google Cloud Functions: diseño de funciones, Cold Starts)"
              status: "Pendiente"
              suggested_practice:
                - "Desplegar una función serverless y medir el cold start."
            - id: 4.5.4
              name: "Monitoreo y Alerting Post-Despliegue"
              status: "Pendiente"
              suggested_practice:
                - "Configurar alertas y monitoreo post-despliegue."
            - id: 4.5.5
              name: "Feature Flags y despliegue progresivo"
              status: "Pendiente"
              suggested_practice:
                - "Implementar feature flags y realizar un despliegue progresivo."
            - id: 4.5.6
              name: "Infraestructura como Código (IaC) con Node.js/TypeScript"
              status: "Pendiente"
              suggested_practice:
                - "Aprender los conceptos básicos de IaC (idempotencia, estado, versiones) y sus beneficios para la automatización de infraestructura."
                - "Elegir una herramienta de IaC (Terraform, AWS CDK, Pulumi) y familiarizarse con su sintaxis y flujo de trabajo."
                - "Crear una infraestructura simple (ej. un VPC, subnets, un grupo de seguridad) utilizando IaC."
                - "Automatizar el despliegue de infraestructura de Node.js (ej. un cluster ECS/EKS, una base de datos RDS) utilizando IaC en un pipeline CI/CD."
    - id: 5
      title: "Habilidades de Experto y Preparación para Entrevistas"
      topics:
        - number: 1
          status: "Pendiente"
          name: "Debugging y Resolución de Problemas (Troubleshooting) Avanzado"
          subtopics:
            - id: 5.1.1
              name: "Estrategias para depurar aplicaciones complejas"
              status: "Pendiente"
              suggested_practice:
                - "Depurar una app Node.js compleja usando breakpoints y logs."
            - id: 5.1.2
              name: "Uso de herramientas de monitoreo y logs"
              status: "Pendiente"
              suggested_practice:
                - "Configurar y analizar logs y métricas en producción."
            - id: 5.1.3
              name: "Análisis de 'post-mortems'"
              status: "Pendiente"
              suggested_practice:
                - "Realizar un post-mortem de un incidente simulado."
            - id: 5.1.4
              name: "Análisis de core dumps y crash dumps"
              status: "Pendiente"
              suggested_practice:
                - "Analizar un core dump generado por un crash en Node.js."
        - number: 2
          status: "Pendiente"
          name: "Revisión de Código (Code Review) y Buenas Prácticas"
          subtopics:
            - id: 5.2.1
              name: "Cómo realizar code reviews efectivos"
              status: "Pendiente"
              suggested_practice:
                - "Participar en code reviews y documentar feedback constructivo."
            - id: 5.2.2
              name: "Principios SOLID, DRY, KISS, Clean Code y Clean Architecture en Node.js/TypeScript"
              status: "Pendiente"
              suggested_practice:
                - "Refactorizar código aplicando principios SOLID y Clean Code."
            - id: 5.2.3
              name: "Automatización de code reviews (herramientas y bots)"
              status: "Pendiente"
              suggested_practice:
                - "Configurar una herramienta de automatización de code reviews."
        - number: 3
          status: "Pendiente"
          name: "Diseño de Sistemas (System Design) con Node.js"
          subtopics:
            - id: 5.3.1
              name: "Preparación para entrevistas de System Design"
              status: "Pendiente"
              suggested_practice:
                - "Simular una entrevista de system design y justificar decisiones."
            - id: 5.3.2
              name: "Patrones de Diseño Comunes en System Design"
              status: "Pendiente"
              suggested_practice:
                - "Estudiar y aplicar patrones de escalabilidad como Load Balancing (balanceo de carga), Caching (caché distribuido), Sharding (fragmentación) y Replication (replicación de datos)."
                - "Comprender y explicar patrones de alta disponibilidad como Failover (conmutación por error) y Leader-Follower."
                - "Analizar el uso de Message Queues (colas de mensajes) y Event Streams (flujos de eventos) para comunicación y desacoplamiento asíncrono."
                - "Discutir y ejemplificar patrones de seguridad (ej. OAuth, JWT, mTLS) en el diseño de sistemas distribuidos."
                - "Aplicar estos patrones en el diseño de arquitecturas de sistemas para resolver problemas específicos."
            - id: 5.3.3
              name: "Escalabilidad, disponibilidad, consistencia, tolerancia a fallos"
              status: "Pendiente"
              suggested_practice:
                - "Diseñar un sistema que cumpla requisitos de escalabilidad y tolerancia a fallos."
            - id: 5.3.4
              name: "Casos de estudio"
              status: "Pendiente"
              suggested_practice:
                - "Analizar un caso de estudio real y proponer mejoras."
            - id: 5.3.5
              name: "Consistencia eventual y patrones CAP"
              status: "Pendiente"
              suggested_practice:
                - "Explicar y ejemplificar el uso de patrones CAP en sistemas distribuidos."
        - number: 4
          status: "Pendiente"
          name: "Algoritmos y Estructuras de Datos Relevantes para JavaScript/Node.js"
          subtopics:
            - id: 5.4.1
              name: "Repaso de estructuras de datos clave (Arrays, Linked Lists, Trees, Graphs, Hash Tables)"
              status: "Pendiente"
              suggested_practice:
                - "Implementar y comparar estructuras de datos en JavaScript."
            - id: 5.4.2
              name: "Algoritmos de búsqueda y ordenamiento"
              status: "Pendiente"
              suggested_practice:
                - "Comparar eficiencia de algoritmos de búsqueda y ordenamiento."
            - id: 5.4.3
              name: "Complejidad Big O y optimización de algoritmos"
              status: "Pendiente"
              suggested_practice:
                - "Analizar y optimizar la complejidad de un algoritmo dado."
            - id: 5.4.4
              name: "Resolución de problemas algorítmicos comunes"
              status: "Pendiente"
              suggested_practice:
                - "Resolver problemas de plataformas como LeetCode o HackerRank."
            - id: 5.4.5
              name: "Algoritmos concurrentes y estructuras lock-free"
              status: "Pendiente"
              suggested_practice:
                - "Implementar un algoritmo concurrente y analizar condiciones de carrera."
        - number: 5
          status: "Pendiente"
          name: "Preparación para Entrevistas Técnicas Avanzadas"
          subtopics:
            - id: 5.5.1
              name: "Preguntas profundas sobre JavaScript (Event Loop, V8, closures)"
              status: "Pendiente"
              suggested_practice:
                - "Responder preguntas técnicas avanzadas sobre el Event Loop y V8."
            - id: 5.5.2
              name: "TypeScript (tipos complejos, decorators)"
              status: "Pendiente"
              suggested_practice:
                - "Explicar y ejemplificar tipos complejos y decoradores en TypeScript."
            - id: 5.5.3
              name: "Node.js (Event Loop, libuv, Thread Pool)"
              status: "Pendiente"
              suggested_practice:
                - "Describir el funcionamiento interno del Event Loop y libuv."
            - id: 5.5.4
              name: "Diseño de APIs/microservicios/seguridad"
              status: "Pendiente"
              suggested_practice:
                - "Diseñar una API segura y escalable para un caso de entrevista."
            - id: 5.5.5
              name: "Estrategias para responder preguntas de comportamiento y liderazgo técnico"
              status: "Pendiente"
              suggested_practice:
                - "Practicar respuestas a preguntas de liderazgo y comportamiento."
            - id: 5.5.6
              name: "Preguntas de diseño de sistemas distribuidos y cloud-native"
              status: "Pendiente"
              suggested_practice:
                - "Resolver preguntas de diseño de sistemas distribuidos en entrevistas."
