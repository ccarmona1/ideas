id: 1
title: 'JavaScript Profundo y Mecanismos de Ejecución'
topics:
  - id: 1.1
    completed: true
    name: 'Motor JavaScript (V8)'
    subtopics:
      - id: 1.1.1
        name: 'Parsing y Abstract Syntax Tree (AST)'
        completed: true
        suggested_practice:
          - 'Analizar cómo el código fuente se convierte en AST usando herramientas como AST Explorer.'
      - id: 1.1.2
        name: 'Ignition (Interpreter) y TurboFan (Optimizing Compiler)'
        completed: true
        suggested_practice:
          - 'Comparar el rendimiento de código interpretado vs. optimizado en V8.'
      - id: 1.1.3
        name: 'JIT Compilation'
        completed: true
        suggested_practice:
          - 'Investigar cuándo y cómo V8 decide compilar funciones Just-In-Time.'
      - id: 1.1.4
        name: 'Garbage Collection (Generational GC, Mark-Sweep, Mark-Compact)'
        completed: true
        suggested_practice:
          - 'Simular escenarios de uso intensivo de memoria y observar el comportamiento del Garbage Collector.'
      - id: 1.1.5
        name: 'Hidden Classes y Inline Caching'
        completed: true
        suggested_practice:
          - 'Implementar ejemplos que demuestren cómo el V8 puede optimizar (o desoptimizar) el código usando Hidden Classes.'
      - id: 1.1.6
        name: 'Snapshot Serialization y Deserialización'
        completed: true
        suggested_practice:
          - 'Investigar cómo V8 serializa y deserializa snapshots y su impacto en el arranque de Node.js.'
      - id: 1.1.7
        name: 'Optimización de Arrays'
        completed: true
        suggested_practice:
          - 'Comparar el rendimiento de arrays homogéneos vs. heterogéneos en V8.'
      - id: 1.1.8
        name: 'Deopt Reasons y Pipeline de Optimización/Desoptimización'
        completed: true
        suggested_practice:
          - 'Investigar y documentar las razones comunes de desoptimización (deopt reasons) en V8.'
          - 'Simular escenarios que provoquen desoptimización y analizar el impacto en el rendimiento.'
      - id: 1.1.9
        name: 'Comparación de Motores JavaScript (V8, SpiderMonkey, JavaScriptCore)'
        completed: true
        suggested_practice:
          - 'Comparar decisiones de diseño y optimización entre V8 y otros motores populares.'
          - 'Analizar cómo afectan los cambios de versión de V8 a la compatibilidad y rendimiento de Node.js.'
      - id: 1.1.10
        name: 'Impacto de Nuevas Propuestas ECMAScript en V8'
        completed: true
        suggested_practice:
          - 'Investigar cómo nuevas propuestas (ej. records & tuples, temporal) afectan la arquitectura y optimización de V8.'
  - id: 1.2
    completed: true
    name: 'Contextos de Ejecución y Scopes Avanzados'
    subtopics:
      - id: 1.2.1
        name: 'Execution Context Stack (Global, Function, Eval)'
        completed: true
        suggested_practice:
          - 'Visualizar el stack de contextos de ejecución con ejemplos anidados.'
      - id: 1.2.2
        name: 'Lexical Environment y Variable Environment'
        completed: true
        suggested_practice:
          - 'Modificar variables en diferentes entornos léxicos y observar el resultado.'
      - id: 1.2.3
        name: "'this' Binding en Profundidad"
        completed: true
        suggested_practice:
          - "Comparar el binding de 'this' en funciones normales, flecha y métodos."
      - id: 1.2.4
        name: 'Closures y Closure Profundo y su relacion con This'
        completed: true
        suggested_practice:
          - 'Crear closures anidados y explicar el alcance de las variables.'
      - id: 1.2.5
        name: 'Temporal Dead Zone (TDZ) y Hoisting avanzado'
        completed: true
        suggested_practice:
          - 'Predecir errores de acceso a variables en la TDZ y explicar el hoisting.'
      - id: 1.2.6
        name: 'Strict Mode (Modo Estricto): diferencias y advertencias'
        completed: true
        suggested_practice:
          - 'Identificar errores que solo ocurren en modo estricto y explicar por qué.'
      - id: 1.2.7
        name: 'Visualización Avanzada de Scope Chain y Resolución en Tiempo de Ejecución'
        completed: true
        suggested_practice:
          - 'Utilizar diagramas o herramientas para visualizar el scope chain en ejemplos complejos.'
          - 'Ejercicios prácticos de debugging de closures y memory leaks relacionados con contextos de ejecución.'
      - id: 1.2.8
        name: 'Edge Cases con eval y with: Seguridad y Performance'
        completed: true
        suggested_practice:
          - 'Analizar casos límite y advertencias de seguridad/performance al usar eval y with.'
      - id: 1.2.9
        name: 'Impacto de Módulos ES6 en el Scope Global y Aislamiento de Contextos'
        completed: true
        suggested_practice:
          - 'Comparar el comportamiento del scope global en scripts tradicionales vs. módulos ES6.'
      - id: 1.2.10
        name: 'Debugging de Scopes y Contextos con Herramientas Modernas'
        completed: true
        suggested_practice:
          - 'Utilizar DevTools y VSCode para inspeccionar scopes y contextos de ejecución en tiempo real.'
  - id: 1.3
    completed: true
    name: 'Prototipos, Clases y Encapsulamiento en JavaScript'
    subtopics:
      - id: 1.3.1
        name: 'Herencia Prototípica y Cadena de Prototipos'
        completed: true
        suggested_practice:
          - 'Implementar una cadena de prototipos y rastrear la resolución de propiedades.'
      - id: 1.3.2
        name: "Funciones Constructoras, Operador 'new' y Object.create()"
        completed: true
        suggested_practice:
          - "Crear objetos con funciones constructoras y analizar el resultado de 'new'."
          - 'Modificar la cadena de prototipos de un objeto existente y observar el efecto.'
      - id: 1.3.3
        name: 'Clases ES6+: Azúcar Sintáctico, Herencia y Representación Interna'
        completed: true
        suggested_practice:
          - 'Refactorizar código de funciones constructoras a clases ES6.'
          - 'Implementar herencia usando clases ES6 y comparar con prototipos.'
          - 'Investigar cómo V8 transpila y optimiza las clases ES6 en comparación con funciones constructoras.'
      - id: 1.3.4
        name: 'Mixins, Composición y Encapsulamiento (Símbolos y Propiedades Privadas)'
        completed: true
        suggested_practice:
          - 'Implementar mixins para compartir funcionalidad entre objetos.'
          - 'Usar símbolos y campos privados para encapsular propiedades.'
      - id: 1.3.5
        name: 'Características Estáticas de las Clases (Static Class Features)'
        completed: true
        suggested_practice:
          - 'Implementar métodos y propiedades estáticas en clases ES6+ y analizar su uso y limitaciones.'
          - 'Comparar el acceso a miembros estáticos vs. de instancia y explicar escenarios de uso.'
          - 'Investigar nuevas propuestas de características estáticas (ej. static initialization blocks) y su soporte en motores modernos.'
      - id: 1.3.6
        name: 'Clases Abstractas (Abstract Classes): Simulación, Patrones y Limitaciones'
        completed: true
        suggested_practice:
          - 'Simular una clase abstracta en JavaScript usando ES6+ y demostrar su uso.'
          - 'Analizar limitaciones y advertencias al simular abstracción en JavaScript.'
      - id: 1.3.7
        name: 'Interfaces y Duck Typing en JavaScript: Patrones y Buenas Prácticas'
        completed: true
        suggested_practice:
          - 'Implementar duck typing para validar la forma de un objeto en tiempo de ejecución.'
          - 'Comparar el uso de interfaces en TypeScript con patrones de duck typing en JavaScript.'
          - 'Analizar ventajas y riesgos del duck typing en aplicaciones grandes.'
      - id: 1.3.8
        name: 'Polimorfismo en JavaScript: Clásico y por Composición'
        completed: true
        suggested_practice:
          - 'Implementar polimorfismo usando herencia prototípica y composición de funciones.'
          - 'Comparar polimorfismo clásico vs. por composición en escenarios prácticos.'
          - 'Analizar cuándo preferir composición sobre herencia para polimorfismo.'
      - id: 1.3.9
        name: 'Decoradores de Clase (Class Decorators): Estado Actual y Polyfills'
        completed: true
        suggested_practice:
          - 'Simular un decorador de clase usando funciones de orden superior en JavaScript.'
          - 'Investigar el estado de la propuesta de decoradores en ECMAScript y su uso con Babel.'
          - 'Comparar decoradores en JavaScript con los de TypeScript y Python.'
      - id: 1.3.10
        name: 'Comparación de Clases y Objetos en JavaScript vs. Otros Lenguajes (Java, C#, Python)'
        completed: true
        suggested_practice:
          - 'Comparar la herencia, encapsulamiento y polimorfismo en JavaScript y otros lenguajes OO.'
          - 'Identificar ventajas y limitaciones del modelo de objetos de JavaScript.'
          - 'Analizar casos donde la diferencia de modelo impacta el diseño de software.'
      - id: 1.3.11
        name: 'Limitaciones y Advertencias de las Clases ES6+'
        completed: true
        suggested_practice:
          - 'Identificar comportamientos inesperados de las clases ES6+ (ej. no herencia de propiedades estáticas, this en métodos estáticos, etc.).'
          - 'Analizar advertencias sobre el uso de clases en entornos de alto rendimiento.'
          - 'Investigar diferencias entre clases ES6+ y funciones constructoras en cuanto a optimización y debugging.'
      - id: 1.3.12
        name: 'Debugging Avanzado de la Cadena de Prototipos'
        completed: true
        suggested_practice:
          - 'Ejercicios prácticos de debugging de la cadena de prototipos en aplicaciones reales.'
      - id: 1.3.13
        name: 'Performance de Herencia y Composición en V8'
        completed: true
        suggested_practice:
          - 'Comparar el rendimiento de diferentes patrones de herencia y composición en V8.'
      - id: 1.3.14
        name: 'Proxies y Metaprogramación Avanzada para Encapsulamiento'
        completed: true
        suggested_practice:
          - 'Implementar proxies para encapsular y controlar el acceso a propiedades y métodos.'
      - id: 1.3.15
        name: 'Enumerables y Property Descriptors: Iteración, Definición y Buenas Prácticas'
        completed: true
        suggested_practice:
          - 'Comparar el comportamiento de for...in, Object.keys, Object.getOwnPropertyNames y Object.entries.'
          - 'Definir propiedades no enumerables usando Object.defineProperty y analizar su impacto en la iteración.'
          - 'Modificar y consultar property descriptors con Object.getOwnPropertyDescriptor.'
          - 'Analizar cómo la enumerabilidad afecta la herencia, los mixins y la composición.'
          - 'Identificar buenas prácticas para evitar errores comunes con propiedades enumerables y no enumerables.'
      - id: 1.3.16
        name: 'Interoperabilidad ES5/ES6+ y Migración de Sistemas Legacy'
        completed: true
        suggested_practice:
          - 'Ejercicios de interoperabilidad entre código ES5 y ES6+.'
          - 'Casos de estudio de migración de sistemas legacy basados en prototipos a clases modernas.'
      - id: 1.3.17
        name: 'Análisis de Seguridad: Encapsulamiento con Símbolos y Campos Privados'
        completed: true
        suggested_practice:
          - 'Analizar cómo evitar fugas de información usando símbolos y campos privados.'
      - id: 1.3.18
        name: 'Integración de Patrones de Diseño Clásicos con Clases Modernas'
        completed: true
        suggested_practice:
          - 'Ejercicios de integración de patrones como módulo o revealing module con clases ES6+.'
  - id: 1.4
    completed: true
    name: 'Novedades y Mejoras en ES6+ (ECMAScript 2015+)'
    subtopics:
      - id: 1.4.1
        name: 'Declaración de Variables: var, let, const, TDZ y Block Scope'
        completed: true
        suggested_practice:
          - 'Comparar el comportamiento de var, let y const en diferentes contextos.'
          - 'Visualizar errores y diferencias de acceso a variables en la TDZ usando let/const y var.'
          - 'Analizar cómo V8 maneja el scope de let/const y su impacto en la optimización y el hoisting.'
      - id: 1.4.2
        name: 'Arrow Functions, Closures y Lexical Environment'
        completed: true
        suggested_practice:
          - 'Reescribir funciones tradicionales usando arrow functions y analizar el binding de this.'
          - 'Crear ejemplos de closures usando let/const y arrow functions, y analizar el entorno léxico generado.'
          - 'Comparar el rendimiento y el manejo de closures entre funciones tradicionales y arrow functions en V8.'
      - id: 1.4.3
        name: 'Destructuración y Parámetros por Defecto'
        completed: true
        suggested_practice:
          - 'Desestructurar objetos y arrays en funciones y asignaciones.'
      - id: 1.4.4
        name: 'Promesas, async/await y Combinadores de Promesas'
        completed: true
        suggested_practice:
          - 'Convertir callbacks a promesas y usar Promise.all, Promise.race, etc.'
          - 'Implementar ejemplos con combinadores de promesas y analizar los resultados.'
          - 'Gestionar errores y flujos complejos usando async/await.'
      - id: 1.4.5
        name: 'Iteradores, Generadores y for-of'
        completed: true
        suggested_practice:
          - 'Implementar ejemplos prácticos usando generadores y for-of.'
          - 'Crear un generador personalizado y consumirlo con un bucle.'
      - id: 1.4.6
        name: 'Otras Mejoras: template literals, Map/Set (todas).'
        completed: true
        suggested_practice:
          - 'Implementar ejemplos prácticos usando rest/spread, template literals, Map/Set.'
      - id: 1.4.7
        name: 'Optional Chaining (?.) y Nullish Coalescing (??) y todos los operadores'
        completed: true
        suggested_practice:
          - 'Implementar ejemplos prácticos usando optional chaining y nullish coalescing para acceder a propiedades anidadas y valores por defecto.'
          - 'Comparar el uso de estos operadores con técnicas tradicionales como && y ||.'
          - 'Analizar casos donde el uso incorrecto de nullish coalescing puede llevar a errores sutiles.'
  - id: 1.5
    completed: true
    name: 'Manejo de la Asincronía en JavaScript (Event Loop - Navegador) (antes de ES6 y ES6+)'
    subtopics:
      - id: 1.5.1
        name: 'Call Stack y Web APIs'
        completed: true
        suggested_practice:
          - 'Simular llamadas asíncronas y observar el call stack y las Web APIs.'
      - id: 1.5.2
        name: 'Callback Queue (Task Queue) y Microtask Queue'
        completed: true
        suggested_practice:
          - 'Ejecutar código que mezcle microtasks y macrotasks y analizar el orden.'
      - id: 1.5.3
        name: 'Macrotasks vs. Microtasks (setTimeout, setInterval vs. Promise.then(), queueMicrotask)'
        completed: true
        suggested_practice:
          - 'Comparar el orden de ejecución de diferentes tipos de tareas.'
          - 'Analizar fragmentos de código estático que mezclen tareas síncronas, macrotasks y microtasks, y predecir el resultado antes de ejecutarlo. Justificar el razonamiento paso a paso.'
      - id: 1.5.4
        name: "El 'Tick' del Event Loop"
        completed: true
        suggested_practice:
          - 'Visualizar el ciclo de ticks del event loop con ejemplos prácticos.'
      - id: 1.5.5
        name: 'Timers Internals'
        completed: true
        suggested_practice:
          - 'Investigar cómo se gestionan internamente los timers en el navegador y Node.js.'
      - id: 1.5.6
        name: 'Web Workers y Service Workers'
        completed: true
        suggested_practice:
          - 'Crear un Web Worker y un Service Worker y analizar su ciclo de vida.'
          - 'Comparar Web Workers con worker_threads de Node.js: diferencias de API, casos de uso, limitaciones y advertencias de interoperabilidad.'
        notes:
          - 'Diferencias clave entre Web Workers (navegador) y worker_threads (Node.js): los Web Workers están diseñados para entornos de navegador y no tienen acceso directo al sistema de archivos ni a módulos de Node.js, mientras que worker_threads permiten operaciones de bajo nivel y acceso completo al entorno Node.js.'
          - 'Advertencia: El código para Web Workers no es portable directamente a Node.js y viceversa. Analizar cuándo usar cada uno y las mejores prácticas para interoperabilidad.'
  - id: 1.6
    completed: true
    name: 'Patrones Avanzados de Asincronía con ES6+ y su relación con el event loop'
    subtopics:
      - id: 1.6.1
        name: 'Promesas (Promise combinators: allSettled, any)'
        completed: true
        suggested_practice:
          - 'Implementar ejemplos con combinadores de promesas y analizar los resultados.'
      - id: 1.6.2
        name: 'async/await avanzado y su manejo en el event loop del navegador'
        completed: true
        suggested_practice:
          - 'Gestionar errores y flujos complejos usando async/await.'
      - id: 1.6.3
        name: 'Stream API (Only Javascript, Fetch, Backpressure, Duplex, Blob)'
        completed: true
        suggested_practice:
          - 'Consumir datos de una API o archivo usando streams y analizar el flujo y el manejo de backpressure.'
      - id: 1.6.4
        name: 'Cancelable Promises y AbortController'
        completed: true
        suggested_practice:
          - 'Implementar una promesa cancelable usando AbortController.'
      - id: 1.6.5
        name: 'Async Iterators y for-await-of'
        completed: true
        suggested_practice:
          - 'Iterar sobre datos asíncronos usando for-await-of.'
  - id: 1.7
    completed: true
    name: 'Diseño de Patrones en JavaScript con ES6+'
    subtopics:
      - id: 1.7.1
        name: 'Patrones Creacionales (Singleton, Factory)'
        completed: true
        suggested_practice:
          - 'Implementar un patrón Singleton y un Factory en JavaScript.'
          - 'Comparar la implementación de estos patrones en JavaScript con otros lenguajes como Java y C#.'
      - id: 1.7.2
        name: 'Patrones Estructurales (Adapter, Decorator, Proxy)'
        completed: true
        suggested_practice:
          - 'Implementar un patrón Adapter y analizar cómo transforma la interfaz de un objeto.'
          - 'Crear un Decorator que añada comportamiento a un objeto en tiempo de ejecución.'
          - 'Usar un Proxy para interceptar y redefinir operaciones fundamentales en un objeto.'
      - id: 1.7.3
        name: 'Patrones de Comportamiento (Observer, Strategy, Command)'
        completed: true
        suggested_practice:
          - 'Implementar el patrón Observer para notificar cambios entre objetos.'
          - 'Usar el patrón Strategy para definir una familia de algoritmos y hacerlos intercambiables.'
          - 'Implementar el patrón Command para encapsular acciones como objetos.'
      - id: 1.7.4
        name: 'Patrones Avanzados (Module, Revealing Module, IIFE)'
        completed: true
        suggested_practice:
          - 'Implementar el patrón Module para encapsular variables y funciones privadas.'
          - 'Usar el patrón Revealing Module para exponer solo ciertas partes de un módulo.'
          - 'Crear una IIFE (Immediately Invoked Function Expression) para crear un ámbito léxico privado.'
      - id: 1.7.5
        name: 'Comparación y Elección de Patrones de Diseño'
        completed: true
        suggested_practice:
          - 'Comparar las ventajas y desventajas de diferentes patrones de diseño en JavaScript.'
          - 'Discutir cuándo es apropiado usar un patrón sobre otro en base a requisitos específicos.'
          - 'Analizar ejemplos de la vida real donde se hayan aplicado estos patrones.'
  - id: 1.8
    completed: true
    name: 'Entendimiento y Manipulación del DOM'
    subtopics:
      - id: 1.8.1
        name: '¿Qué es el DOM? Estructura y Árbol de Nodos'
        completed: true
        suggested_practice:
          - 'Visualizar el árbol DOM de una página web simple.'
      - id: 1.8.2
        name: 'Selección y Búsqueda de Elementos (getElementById, querySelector, etc.)'
        completed: true
        suggested_practice:
          - 'Practicar la selección de elementos usando diferentes métodos.'
      - id: 1.8.3
        name: 'Manipulación de Elementos: Lectura y Modificación de Propiedades y Atributos'
        completed: true
        suggested_practice:
          - 'Modificar el contenido y atributos de elementos desde JavaScript.'
      - id: 1.8.4
        name: 'Creación, Inserción y Eliminación de Nodos'
        completed: true
        suggested_practice:
          - 'Crear, insertar y eliminar nodos dinámicamente en el DOM.'
      - id: 1.8.5
        name: 'Eventos y Delegación de Eventos (Bubbling, Capturing, Delegation)'
        completed: true
        suggested_practice:
          - 'Agregar y eliminar listeners de eventos.'
          - 'Implementar delegación de eventos para manejar múltiples elementos.'
      - id: 1.8.6
        name: 'Buenas Prácticas y Performance en Manipulación del DOM'
        completed: true
        suggested_practice:
          - 'Analizar el impacto de las manipulaciones frecuentes del DOM en el rendimiento.'
          - 'Investigar técnicas para minimizar reflows y repaints.'
  - id: 1.9
    completed: true
    name: 'Operadores y Palabras Clave para Análisis de Tipos y Prototipos'
    subtopics:
      - id: 1.9.1
        name: 'typeof: Detección de Tipos Primitivos y Casos Especiales'
        completed: true
        suggested_practice:
          - 'Explorar el uso de typeof con diferentes valores (primitivos, null, funciones, arrays, objetos).'
          - 'Analizar el resultado de typeof null y typeof array.'
      - id: 1.9.2
        name: 'instanceof: Herencia, Prototipos y Limitaciones'
        completed: true
        suggested_practice:
          - 'Comparar instanceof con typeof y Object.prototype.toString.'
          - 'Detectar instancias de clases personalizadas y objetos nativos.'
      - id: 1.9.3
        name: 'Realms, iframes y su impacto en la detección de tipos y prototipos'
        completed: true
        suggested_practice:
          - 'Crear objetos en diferentes iframes y analizar el resultado de instanceof y Object.prototype.toString.'
          - 'Explicar cómo los realms afectan la comparación y detección de tipos en JavaScript.'
      - id: 1.9.4
        name: 'constructor y Object.prototype.toString: Detección Avanzada de Tipos'
        completed: true
        suggested_practice:
          - 'Usar constructor y Object.prototype.toString para distinguir arrays, objetos, funciones y clases.'
      - id: 1.9.5
        name: 'Comparaciones: ==, ===, null, undefined y Coerción de Tipos'
        completed: true
        suggested_practice:
          - 'Analizar diferencias entre == y ===, y los casos especiales con null y undefined.'
          - 'Explorar coerción implícita y explícita de tipos.'
      - id: 1.9.6
        name: 'Buenas Prácticas y Errores Comunes en Detección de Tipos'
        completed: true
        suggested_practice:
          - 'Identificar patrones seguros para detección de tipos y evitar errores comunes.'
  - id: 1.10
    completed: false
    name: 'Versiones de ECMAScript: Evolución y Diferencias (ES3, ES5, ES6/2015, ES7, etc.)'
    subtopics:
      - id: 1.10.1
        name: 'Historia y evolución de ECMAScript'
        completed: true
        suggested_practice:
          - 'Investigar el contexto histórico de cada versión principal de ECMAScript.'
          - 'Identificar los hitos clave en la evolución del lenguaje.'
      - id: 1.10.2
        name: 'Principales características de ES3, ES5, ES6/2015, ES7+'
        completed: true
        suggested_practice:
          - 'Comparar las características introducidas en cada versión (por ejemplo: strict mode en ES5, clases y módulos en ES6, etc.).'
          - 'Crear ejemplos prácticos que solo funcionen en versiones específicas.'
      - id: 1.10.3
        name: 'Compatibilidad y soporte en navegadores y entornos de ejecución'
        completed: false
        suggested_practice:
          - 'Analizar tablas de compatibilidad y herramientas como Babel para transpilar código moderno.'
          - 'Investigar cómo las diferencias de versión afectan el desarrollo multiplataforma.'
      - id: 1.10.4
        name: 'Impacto de las diferencias de versión en el desarrollo y mantenimiento de proyectos'
        completed: false
        suggested_practice:
          - 'Discutir buenas prácticas para mantener proyectos compatibles con múltiples versiones.'
          - 'Analizar casos reales de migración de código legacy a versiones modernas.'
