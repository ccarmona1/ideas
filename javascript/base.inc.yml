## --------------------
## DON'T EDIT THIS FILE
## --------------------
## Engine: yamlinc@0.1.10
## Source: base.yml

course:
  name: "Especialización Avanzada en JavaScript, TypeScript y Node.js"
  description: >-
    Curso diseñado para ingenieros de sistemas con experiencia, enfocado en las
    mecánicas internas, optimización de rendimiento y arquitecturas avanzadas
    para lograr un dominio experto en JS, TS y Node.js.
  instruccionesIA: >
    Por cada iteración que tengas, vuelve a leer este yml en su totalidad. Para
    cada pregunta, proporciona una explicación detallada del concepto
    involucrado. Incluye ejemplos prácticos, analogías si es útil, advertencias
    comunes y mejores prácticas. Asegúrate de que la persona entienda el "por
    qué" y el "cómo" detrás de cada concepto. Siempre valida si desea una
    explicación más técnica o más sencilla, y adapta el lenguaje. Para cada
    tópico, genera 3 preguntas tipo examen que validen la comprensión profunda
    del concepto, no generes exámenes fáciles. Las preguntas deben ser
    desafiantes y requerir la aplicación o el análisis, no solo la memorización.
    Incluye una mezcla de:
      - Preguntas de opción múltiple con explicaciones detalladas para cada opción (correcta e incorrectas).
      - Preguntas de "verdadero o falso" que requieran justificación.
      - Preguntas abiertas que soliciten ejemplos de código, análisis de escenarios o explicación del "por qué".
    Asegúrate de que las preguntas abarquen diferentes aspectos del tema
    (funcionamiento interno, optimización, mejores prácticas, advertencias).
    Siempre proporciona la respuesta correcta y una explicación exhaustiva.
    Recuerda mencionar las prácticas sugeridas para cada subtema. Ignora los
    topics o subtopics marcados como completados. Tu tarea es seguir la hoja de
    ruta y no adelantar temas que aún no hemos cubierto Identifica si al tópico
    le hace falta contenido y sugiere que otro tema debería incluír el tópico
    Por cada término en español, incluye su traducción en inglés en paréntesis
    Incluye información adicional acerca de nuevas tecnologías o herramientas
    implementadas en ES6+
  target_audience:
    - Ingeniero en Sistemas
    - 9 años de experiencia en la industria del software
    - 3 años de experiencia específica en JavaScript/TypeScript/Node.js
  learning_goal: >-
    Convertirse en un experto demostrable en estas tecnologías, capaz de
    diseñar, desarrollar y optimizar aplicaciones de alto rendimiento, entender
    el funcionamiento interno y demostrar este conocimiento en entornos
    profesionales exigentes y entrevistas.
  prerequisites_excluded:
    - Variables
    - Ciclos
    - Condicionales
    - Conceptos básicos de programación
  modules:
    - id: 1
      title: JavaScript Profundo y Mecanismos de Ejecución
      topics:
        - number: 1
          status: Completado
          name: Motor JavaScript (V8)
          subtopics:
            - id: 1.1.1
              name: Parsing y Abstract Syntax Tree (AST)
              status: Completado
              suggested_practice:
                - >-
                  Analizar cómo el código fuente se convierte en AST usando
                  herramientas como AST Explorer.
            - id: 1.1.2
              name: Ignition (Interpreter) y TurboFan (Optimizing Compiler)
              status: Completado
              suggested_practice:
                - >-
                  Comparar el rendimiento de código interpretado vs. optimizado
                  en V8.
            - id: 1.1.3
              name: JIT Compilation
              status: Completado
              suggested_practice:
                - >-
                  Investigar cuándo y cómo V8 decide compilar funciones
                  Just-In-Time.
            - id: 1.1.4
              name: "Garbage Collection (Generational GC, Mark-Sweep, Mark-Compact)"
              status: Completado
              suggested_practice:
                - >-
                  Simular escenarios de uso intensivo de memoria y observar el
                  comportamiento del Garbage Collector.
            - id: 1.1.5
              name: Hidden Classes y Inline Caching
              status: Completado
              suggested_practice:
                - >-
                  Implementar ejemplos que demuestren cómo el V8 puede optimizar
                  (o desoptimizar) el código usando Hidden Classes.
            - id: 1.1.6
              name: Snapshot Serialization y Deserialización
              status: Completado
              suggested_practice:
                - >-
                  Investigar cómo V8 serializa y deserializa snapshots y su
                  impacto en el arranque de Node.js.
            - id: 1.1.7
              name: Optimización de Arrays
              status: Completado
              suggested_practice:
                - >-
                  Comparar el rendimiento de arrays homogéneos vs. heterogéneos
                  en V8.
            - id: 1.1.8
              name: >-
                Profiling y Logs Avanzados en V8 (trace-opt, trace-deopt,
                trace-gc)
              status: Pendiente
              suggested_practice:
                - >-
                  Ejecutar código con flags de V8 (--trace-opt, --trace-deopt,
                  --trace-gc) y analizar los logs para identificar
                  optimizaciones y desoptimizaciones.
                - Interpretar logs de V8 para debugging de performance.
            - id: 1.1.9
              name: Deopt Reasons y Pipeline de Optimización/Desoptimización
              status: Pendiente
              suggested_practice:
                - >-
                  Investigar y documentar las razones comunes de desoptimización
                  (deopt reasons) en V8.
                - >-
                  Simular escenarios que provoquen desoptimización y analizar el
                  impacto en el rendimiento.
            - id: 1.1.10
              name: >-
                Comparación de Motores JavaScript (V8, SpiderMonkey,
                JavaScriptCore)
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar decisiones de diseño y optimización entre V8 y otros
                  motores populares.
                - >-
                  Analizar cómo afectan los cambios de versión de V8 a la
                  compatibilidad y rendimiento de Node.js.
            - id: 1.1.11
              name: Impacto de Nuevas Propuestas ECMAScript en V8
              status: Pendiente
              suggested_practice:
                - >-
                  Investigar cómo nuevas propuestas (ej. records & tuples,
                  temporal) afectan la arquitectura y optimización de V8.
        - number: 2
          status: Completado
          name: Contextos de Ejecución y Scopes Avanzados
          subtopics:
            - id: 1.2.1
              name: "Execution Context Stack (Global, Function, Eval)"
              status: Completado
              suggested_practice:
                - >-
                  Visualizar el stack de contextos de ejecución con ejemplos
                  anidados.
            - id: 1.2.2
              name: Lexical Environment y Variable Environment
              status: Completado
              suggested_practice:
                - >-
                  Modificar variables en diferentes entornos léxicos y observar
                  el resultado.
            - id: 1.2.3
              name: "'this' Binding en Profundidad"
              status: Completado
              suggested_practice:
                - >-
                  Comparar el binding de 'this' en funciones normales, flecha y
                  métodos.
            - id: 1.2.4
              name: Closures y Closure Profundo y su relacion con This
              status: Completado
              suggested_practice:
                - >-
                  Crear closures anidados y explicar el alcance de las
                  variables.
            - id: 1.2.5
              name: Temporal Dead Zone (TDZ) y Hoisting avanzado
              status: Completado
              suggested_practice:
                - >-
                  Predecir errores de acceso a variables en la TDZ y explicar el
                  hoisting.
            - id: 1.2.6
              name: "Strict Mode (Modo Estricto): diferencias y advertencias"
              status: Completado
              suggested_practice:
                - >-
                  Identificar errores que solo ocurren en modo estricto y
                  explicar por qué.
            - id: 1.2.7
              name: >-
                Visualización Avanzada de Scope Chain y Resolución en Tiempo de
                Ejecución
              status: Pendiente
              suggested_practice:
                - >-
                  Utilizar diagramas o herramientas para visualizar el scope
                  chain en ejemplos complejos.
                - >-
                  Ejercicios prácticos de debugging de closures y memory leaks
                  relacionados con contextos de ejecución.
            - id: 1.2.8
              name: "Edge Cases con eval y with: Seguridad y Performance"
              status: Pendiente
              suggested_practice:
                - >-
                  Analizar casos límite y advertencias de seguridad/performance
                  al usar eval y with.
            - id: 1.2.9
              name: >-
                Impacto de Módulos ES6 en el Scope Global y Aislamiento de
                Contextos
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar el comportamiento del scope global en scripts
                  tradicionales vs. módulos ES6.
            - id: 1.2.10
              name: Debugging de Scopes y Contextos con Herramientas Modernas
              status: Pendiente
              suggested_practice:
                - >-
                  Utilizar DevTools y VSCode para inspeccionar scopes y
                  contextos de ejecución en tiempo real.
            - id: 1.2.11
              name: Performance y Optimización de Closures en V8
              status: Pendiente
              suggested_practice:
                - >-
                  Analizar el impacto de closures anidados en el rendimiento y
                  optimización en V8.
        - number: 3
          status: Pendiente
          name: "Prototipos, Clases y Encapsulamiento en JavaScript"
          subtopics:
            - id: 1.3.1
              name: Herencia Prototípica y Cadena de Prototipos
              status: Completado
              suggested_practice:
                - >-
                  Implementar una cadena de prototipos y rastrear la resolución
                  de propiedades.
            - id: 1.3.2
              name: "Funciones Constructoras, Operador 'new' y Object.create()"
              status: Completado
              suggested_practice:
                - >-
                  Crear objetos con funciones constructoras y analizar el
                  resultado de 'new'.
                - >-
                  Modificar la cadena de prototipos de un objeto existente y
                  observar el efecto.
            - id: 1.3.3
              name: >-
                Clases ES6+: Azúcar Sintáctico, Herencia y Representación
                Interna
              status: Completado
              suggested_practice:
                - Refactorizar código de funciones constructoras a clases ES6.
                - >-
                  Implementar herencia usando clases ES6 y comparar con
                  prototipos.
                - >-
                  Investigar cómo V8 transpila y optimiza las clases ES6 en
                  comparación con funciones constructoras.
            - id: 1.3.4
              name: >-
                Mixins, Composición y Encapsulamiento (Símbolos y Propiedades
                Privadas)
              status: Completado
              suggested_practice:
                - Implementar mixins para compartir funcionalidad entre objetos.
                - Usar símbolos y campos privados para encapsular propiedades.
            - id: 1.3.5
              name: Características Estáticas de las Clases (Static Class Features)
              status: Completado
              suggested_practice:
                - >-
                  Implementar métodos y propiedades estáticas en clases ES6+ y
                  analizar su uso y limitaciones.
                - >-
                  Comparar el acceso a miembros estáticos vs. de instancia y
                  explicar escenarios de uso.
                - >-
                  Investigar nuevas propuestas de características estáticas (ej.
                  static initialization blocks) y su soporte en motores
                  modernos.
            - id: 1.3.6
              name: >-
                Clases Abstractas (Abstract Classes): Simulación, Patrones y
                Limitaciones
              status: Completado
              suggested_practice:
                - >-
                  Simular una clase abstracta en JavaScript usando ES6+ y
                  demostrar su uso.
                - >-
                  Analizar limitaciones y advertencias al simular abstracción en
                  JavaScript.
            - id: 1.3.7
              name: >-
                Interfaces y Duck Typing en JavaScript: Patrones y Buenas
                Prácticas
              status: Completado
              suggested_practice:
                - >-
                  Implementar duck typing para validar la forma de un objeto en
                  tiempo de ejecución.
                - >-
                  Comparar el uso de interfaces en TypeScript con patrones de
                  duck typing en JavaScript.
                - >-
                  Analizar ventajas y riesgos del duck typing en aplicaciones
                  grandes.
            - id: 1.3.8
              name: "Polimorfismo en JavaScript: Clásico y por Composición"
              status: Completado
              suggested_practice:
                - >-
                  Implementar polimorfismo usando herencia prototípica y
                  composición de funciones.
                - >-
                  Comparar polimorfismo clásico vs. por composición en
                  escenarios prácticos.
                - >-
                  Analizar cuándo preferir composición sobre herencia para
                  polimorfismo.
            - id: 1.3.9
              name: >-
                Decoradores de Clase (Class Decorators): Estado Actual y
                Polyfills
              status: Completado
              suggested_practice:
                - >-
                  Simular un decorador de clase usando funciones de orden
                  superior en JavaScript.
                - >-
                  Investigar el estado de la propuesta de decoradores en
                  ECMAScript y su uso con Babel.
                - >-
                  Comparar decoradores en JavaScript con los de TypeScript y
                  Python.
            - id: 1.3.10
              name: >-
                Comparación de Clases y Objetos en JavaScript vs. Otros
                Lenguajes (Java, C#, Python)
              status: Completado
              suggested_practice:
                - >-
                  Comparar la herencia, encapsulamiento y polimorfismo en
                  JavaScript y otros lenguajes OO.
                - >-
                  Identificar ventajas y limitaciones del modelo de objetos de
                  JavaScript.
                - >-
                  Analizar casos donde la diferencia de modelo impacta el diseño
                  de software.
            - id: 1.3.11
              name: Limitaciones y Advertencias de las Clases ES6+
              status: Completado
              suggested_practice:
                - >-
                  Identificar comportamientos inesperados de las clases ES6+
                  (ej. no herencia de propiedades estáticas, this en métodos
                  estáticos, etc.).
                - >-
                  Analizar advertencias sobre el uso de clases en entornos de
                  alto rendimiento.
                - >-
                  Investigar diferencias entre clases ES6+ y funciones
                  constructoras en cuanto a optimización y debugging.
            - id: 1.3.12
              name: Debugging Avanzado de la Cadena de Prototipos
              status: Pendiente
              suggested_practice:
                - >-
                  Ejercicios prácticos de debugging de la cadena de prototipos
                  en aplicaciones reales.
            - id: 1.3.13
              name: Performance de Herencia y Composición en V8
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar el rendimiento de diferentes patrones de herencia y
                  composición en V8.
            - id: 1.3.14
              name: Proxies y Metaprogramación Avanzada para Encapsulamiento
              status: Pendiente
              suggested_practice:
                - >-
                  Implementar proxies para encapsular y controlar el acceso a
                  propiedades y métodos.
            - id: 1.3.15
              name: Interoperabilidad ES5/ES6+ y Migración de Sistemas Legacy
              status: Pendiente
              suggested_practice:
                - Ejercicios de interoperabilidad entre código ES5 y ES6+.
                - >-
                  Casos de estudio de migración de sistemas legacy basados en
                  prototipos a clases modernas.
            - id: 1.3.16
              name: >-
                Integración de Decoradores y Patrones de Diseño con Frameworks
                Modernos
              status: Pendiente
              suggested_practice:
                - >-
                  Ejercicios prácticos de integración de decoradores con
                  frameworks como NestJS o Angular.
            - id: 1.3.17
              name: >-
                Análisis de Seguridad: Encapsulamiento con Símbolos y Campos
                Privados
              status: Pendiente
              suggested_practice:
                - >-
                  Analizar cómo evitar fugas de información usando símbolos y
                  campos privados.
            - id: 1.3.18
              name: Integración de Patrones de Diseño Clásicos con Clases Modernas
              status: Pendiente
              suggested_practice:
                - >-
                  Ejercicios de integración de patrones como módulo o revealing
                  module con clases ES6+.
        - number: 4
          status: Pendiente
          name: Novedades y Mejoras en ES6+ (ECMAScript 2015+)
          subtopics:
            - id: 1.4.1
              name: "Declaración de Variables: var, let, const, TDZ y Block Scope"
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar el comportamiento de var, let y const en diferentes
                  contextos.
                - >-
                  Visualizar errores y diferencias de acceso a variables en la
                  TDZ usando let/const y var.
                - >-
                  Analizar cómo V8 maneja el scope de let/const y su impacto en
                  la optimización y el hoisting.
            - id: 1.4.2
              name: "Arrow Functions, Closures y Lexical Environment"
              status: Pendiente
              suggested_practice:
                - >-
                  Reescribir funciones tradicionales usando arrow functions y
                  analizar el binding de this.
                - >-
                  Crear ejemplos de closures usando let/const y arrow functions,
                  y analizar el entorno léxico generado.
                - >-
                  Comparar el rendimiento y el manejo de closures entre
                  funciones tradicionales y arrow functions en V8.
            - id: 1.4.3
              name: Destructuración y Parámetros por Defecto
              status: Pendiente
              suggested_practice:
                - Desestructurar objetos y arrays en funciones y asignaciones.
            - id: 1.4.4
              name: Módulos ES6 (import/export)
              status: Pendiente
              suggested_practice:
                - Refactorizar código para usar módulos ES6 en vez de CommonJS.
            - id: 1.4.5
              name: "Promesas, async/await y Combinadores de Promesas"
              status: Pendiente
              suggested_practice:
                - >-
                  Convertir callbacks a promesas y usar Promise.all,
                  Promise.race, etc.
                - >-
                  Implementar ejemplos con combinadores de promesas y analizar
                  los resultados.
                - Gestionar errores y flujos complejos usando async/await.
            - id: 1.4.6
              name: "Iteradores, Generadores y for-of"
              status: Pendiente
              suggested_practice:
                - Implementar ejemplos prácticos usando generadores y for-of.
                - Crear un generador personalizado y consumirlo con un bucle.
            - id: 1.4.7
              name: "Otras Mejoras: rest/spread, template literals, Map/Set, etc."
              status: Pendiente
              suggested_practice:
                - >-
                  Implementar ejemplos prácticos usando rest/spread, template
                  literals, Map/Set.
            - id: 1.4.8
              name: Impacto de let/const y block scope en el motor V8 y optimización
              status: Pendiente
              suggested_practice:
                - >-
                  Analizar cómo V8 maneja el scope de let/const y su impacto en
                  la optimización y el hoisting.
            - id: 1.4.9
              name: "Arrow Functions y optimización en V8 (lexical this, closures)"
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar el rendimiento y el manejo de closures entre
                  funciones tradicionales y arrow functions en V8.
            - id: 1.4.10
              name: >-
                Clases ES6 y su representación interna en V8 (azúcar sintáctico
                vs. prototipos)
              status: Pendiente
              suggested_practice:
                - >-
                  Investigar cómo V8 transpila y optimiza las clases ES6 en
                  comparación con funciones constructoras.
            - id: 1.4.11
              name: >-
                TDZ (Temporal Dead Zone) y hoisting avanzado con let/const vs
                var (ver Scopes)
              status: Pendiente
              suggested_practice:
                - >-
                  Visualizar errores y diferencias de acceso a variables en la
                  TDZ usando let/const y var.
            - id: 1.4.12
              name: Lexical Environment y closures modernos con ES6+ (ver Scopes)
              status: Pendiente
              suggested_practice:
                - >-
                  Crear ejemplos de closures usando let/const y arrow functions,
                  y analizar el entorno léxico generado.
        - number: 5
          status: Pendiente
          name: Manejo de la Asincronía en JavaScript (Event Loop - Navegador)
          subtopics:
            - id: 1.5.1
              name: Call Stack y Web APIs
              status: Pendiente
              suggested_practice:
                - >-
                  Simular llamadas asíncronas y observar el call stack y las Web
                  APIs.
            - id: 1.5.2
              name: Callback Queue (Task Queue) y Microtask Queue
              status: Pendiente
              suggested_practice:
                - >-
                  Ejecutar código que mezcle microtasks y macrotasks y analizar
                  el orden.
            - id: 1.5.3
              name: >-
                Macrotasks vs. Microtasks (setTimeout, setInterval vs.
                Promise.then(), queueMicrotask)
              status: Pendiente
              suggested_practice:
                - Comparar el orden de ejecución de diferentes tipos de tareas.
            - id: 1.5.4
              name: El 'Tick' del Event Loop
              status: Pendiente
              suggested_practice:
                - >-
                  Visualizar el ciclo de ticks del event loop con ejemplos
                  prácticos.
            - id: 1.5.5
              name: Timers Internals
              status: Pendiente
              suggested_practice:
                - >-
                  Investigar cómo se gestionan internamente los timers en el
                  navegador y Node.js.
            - id: 1.5.6
              name: Web Workers y Service Workers
              status: Pendiente
              suggested_practice:
                - >-
                  Crear un Web Worker y un Service Worker y analizar su ciclo de
                  vida.
        - number: 6
          status: Pendiente
          name: Patrones Avanzados de Asincronía
          subtopics:
            - id: 1.6.1
              name: "Promesas (Promise combinators: allSettled, any)"
              status: Pendiente
              suggested_practice:
                - >-
                  Implementar ejemplos con combinadores de promesas y analizar
                  los resultados.
            - id: 1.6.2
              name: async/await avanzado
              status: Pendiente
              suggested_practice:
                - Gestionar errores y flujos complejos usando async/await.
            - id: 1.6.3
              name: Generadores y yield
              status: Pendiente
              suggested_practice:
                - Crear un generador personalizado y consumirlo con un bucle.
            - id: 1.6.4
              name: "Stream API (Fetch, Node.js Streams, Backpressure)"
              status: Pendiente
              suggested_practice:
                - >-
                  Consumir datos de una API o archivo usando streams y analizar
                  el flujo y el manejo de backpressure.
            - id: 1.6.5
              name: Cancelable Promises y AbortController
              status: Pendiente
              suggested_practice:
                - Implementar una promesa cancelable usando AbortController.
            - id: 1.6.6
              name: Async Iterators y for-await-of
              status: Pendiente
              suggested_practice:
                - Iterar sobre datos asíncronos usando for-await-of.
        - number: 7
          status: Pendiente
          name: Diseño de Patrones en JavaScript
          subtopics:
            - id: 1.7.1
              name: "Patrones Creacionales (Singleton, Factory)"
              status: Pendiente
              suggested_practice:
                - Implementar un patrón Singleton y un Factory en JavaScript.
            - id: 1.7.2
              name: "Patrones Estructurales (Adapter, Decorator)"
              status: Pendiente
              suggested_practice:
                - >-
                  Aplicar los patrones Adapter y Decorator a una función
                  existente.
            - id: 1.7.3
              name: "Patrones Comportamentales (Observer, Strategy)"
              status: Pendiente
              suggested_practice:
                - Implementar Observer y Strategy en un sistema de eventos.
            - id: 1.7.4
              name: Patrones de Concurrencia (Throttling/Debouncing)
              status: Pendiente
              suggested_practice:
                - >-
                  Optimizar el manejo de eventos frecuentes con throttling y
                  debouncing.
            - id: 1.7.5
              name: Patrones de Memoization y Cache
              status: Pendiente
              suggested_practice:
                - Implementar memoization para funciones costosas.
            - id: 1.7.6
              name: Patrones de Middleware
              status: Pendiente
              suggested_practice:
                - Crear un sistema de middlewares encadenados para peticiones.
    - id: 2
      title: TypeScript para Aplicaciones Robustas y Escalables
      topics:
        - number: 1
          status: Pendiente
          name: Tipos Avanzados y Utilidades de TypeScript
          subtopics:
            - id: 2.1.1
              name: "Conditional Types, Mapped Types y Utility Types"
              status: Pendiente
              suggested_practice:
                - >-
                  Crear ejemplos de tipos condicionales, mapped types y utility
                  types para validar tipos en tiempo de compilación.
                - >-
                  Transformar interfaces usando mapped types y analizar los
                  resultados.
                - >-
                  Aplicar utility types a tipos personalizados y explicar su
                  utilidad.
            - id: 2.1.2
              name: "Template Literal Types, Indexed Access y Recursive Types"
              status: Pendiente
              suggested_practice:
                - >-
                  Definir tipos de cadenas dinámicas y usarlos en funciones
                  genéricas.
                - >-
                  Acceder a tipos anidados en estructuras complejas y documentar
                  los resultados.
                - >-
                  Implementar tipos recursivos para estructuras como árboles o
                  listas enlazadas.
            - id: 2.1.3
              name: Branded Types y Validación Nominal
              status: Pendiente
              suggested_practice:
                - >-
                  Crear branded types para diferenciar tipos primitivos en
                  validaciones.
        - number: 2
          status: Pendiente
          name: "Seguridad de Tipos: unknown, any y Type Guards"
          subtopics:
            - id: 2.2.1
              name: Uso apropiado de 'unknown' vs. 'any' y refinamiento seguro
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar el comportamiento de 'unknown' y 'any' en funciones
                  genéricas.
                - >-
                  Implementar type guards para refinar valores de tipo
                  'unknown'.
            - id: 2.2.2
              name: Type Guards personalizados y predicados de tipo
              status: Pendiente
              suggested_practice:
                - >-
                  Crear una jerarquía de clases e implementar type guards
                  personalizados.
                - >-
                  Filtrar arrays usando predicados de tipo y documentar los
                  resultados.
        - number: 3
          status: Pendiente
          name: "Módulos, Espacios de Nombres y Declaraciones Avanzadas"
          subtopics:
            - id: 2.3.1
              name: >-
                Módulos, Namespaces y Declaraciones (.d.ts, declare global,
                module augmentation)
              status: Pendiente
              suggested_practice:
                - Comparar módulos y namespaces en un proyecto pequeño.
                - Crear archivos de declaración para una librería personalizada.
                - Agregar tipos globales a un proyecto y analizar su impacto.
                - >-
                  Explorar cómo extender tipos de módulos existentes en
                  TypeScript utilizando la sintaxis de module augmentation.
                - >-
                  Implementar aumentos de módulos para añadir funcionalidad a
                  módulos de terceros.
                - >-
                  Combinar aumentos de módulos con declaration merging para
                  extender clases o interfaces.
        - number: 4
          status: Pendiente
          name: "Decoradores, Metaprogramación y Configuración Avanzada"
          subtopics:
            - id: 2.4.1
              name: "Decoradores, Reflect-metadata y Limitaciones"
              status: Pendiente
              suggested_practice:
                - Implementar un decorador de logging para métodos de una clase.
                - >-
                  Utilizar reflect-metadata para almacenar y recuperar metadatos
                  en clases.
                - >-
                  Investigar y documentar limitaciones de los decoradores en
                  TypeScript.
            - id: 2.4.2
              name: >-
                Configuración avanzada de tsconfig.json, Monorepos y
                Herramientas
              status: Pendiente
              suggested_practice:
                - >-
                  Configurar un proyecto con diferentes strict flags y analizar
                  los errores de tipos.
                - >-
                  Configurar un monorepo con referencias cruzadas entre
                  paquetes.
                - >-
                  Integrar TypeScript con una herramienta de build y analizar el
                  resultado.
                - >-
                  Configurar ESLint en un proyecto TypeScript y corregir
                  advertencias.
        - number: 5
          status: Pendiente
          name: Diseño y Validación de APIs con TypeScript
          subtopics:
            - id: 2.5.1
              name: "Tipificación de Entidades, DTOs y Validación de Esquemas"
              status: Pendiente
              suggested_practice:
                - Definir DTOs tipados para una API REST y validar su uso.
                - Integrar Zod o Yup para validar datos en tiempo de ejecución.
            - id: 2.5.2
              name: Generación de Tipos y Documentación Automática
              status: Pendiente
              suggested_practice:
                - >-
                  Generar tipos TypeScript a partir de una especificación
                  OpenAPI.
                - >-
                  Comparar validaciones en tiempo de ejecución y compilación en
                  un ejemplo práctico.
                - >-
                  Explorar herramientas para documentar y generar tipos
                  automáticamente.
    - id: 3
      title: Node.js Internals y Arquitecturas de Alto Rendimiento
      topics:
        - number: 1
          status: Pendiente
          name: Arquitectura Interna de Node.js
          subtopics:
            - id: 3.1.1
              name: V8 Engine en Node.js
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar el rendimiento de código JavaScript en Node.js vs.
                  navegador.
            - id: 3.1.2
              name: >-
                libuv (Thread Pool para operaciones de E/S, I/O Bound vs. CPU
                Bound)
              status: Pendiente
              suggested_practice:
                - >-
                  Simular operaciones I/O bound y CPU bound y analizar el uso
                  del thread pool.
            - id: 3.1.3
              name: node-addon-api / N-API (creación y uso de addons nativos de C++)
              status: Pendiente
              suggested_practice:
                - >-
                  Crear un addon nativo simple en C++ y consumirlo desde
                  Node.js.
            - id: 3.1.4
              name: "Zero-Cost Abstractions, WebAssembly y Node.js Native Modules"
              status: Pendiente
              suggested_practice:
                - >-
                  Investigar cómo Node.js implementa módulos nativos y sus
                  ventajas de rendimiento.
        - number: 2
          status: Pendiente
          name: Event Loop en Node.js (Profundo)
          subtopics:
            - id: 3.2.1
              name: >-
                Fases del Event Loop (timers, pending callbacks, poll, check,
                close callbacks)
              status: Pendiente
              suggested_practice:
                - >-
                  Visualizar el flujo de tareas en cada fase del event loop
                  usando ejemplos prácticos.
            - id: 3.2.2
              name: Diferencias Clave con el Event Loop del Navegador
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar el orden de ejecución de tareas en Node.js y
                  navegador.
            - id: 3.2.3
              name: >-
                process.nextTick() vs. setImmediate() vs. setTimeout(): Orden de
                ejecución y casos de uso
              status: Pendiente
              suggested_practice:
                - >-
                  Crear ejemplos que mezclen estas APIs y predecir el orden de
                  ejecución.
            - id: 3.2.4
              name: Timers Phase Internals y optimización de callbacks
              status: Pendiente
              suggested_practice:
                - Medir el impacto de callbacks pesados en la fase de timers.
        - number: 3
          status: Pendiente
          name: Manejo de Errores Asíncronos en Node.js
          subtopics:
            - id: 3.3.1
              name: "unhandledRejection, uncaughtException"
              status: Pendiente
              suggested_practice:
                - >-
                  Provocar y capturar errores asíncronos y analizar el flujo de
                  manejo.
            - id: 3.3.2
              name: Error boundaries y patrones de resiliencia
              status: Pendiente
              suggested_practice:
                - Implementar un patrón de error boundary en una app Node.js.
        - number: 4
          status: Pendiente
          name: Módulos Avanzados de Node.js y Patrones
          subtopics:
            - id: 3.4.1
              name: "child_process (spawn, fork, exec, comunicación entre procesos)"
              status: Pendiente
              suggested_practice:
                - Crear un proceso hijo y comunicar datos entre procesos.
            - id: 3.4.2
              name: "cluster Module (escalamiento horizontal, workers)"
              status: Pendiente
              suggested_practice:
                - Escalar un servidor HTTP usando el módulo cluster.
            - id: 3.4.3
              name: "worker_threads (hilos para operaciones CPU-bound, comunicación)"
              status: Pendiente
              suggested_practice:
                - >-
                  Mover una tarea CPU-bound a un worker thread y medir el
                  impacto.
            - id: 3.4.4
              name: >-
                Stream API (Readable, Writable, Duplex, Transform Streams,
                Backpressure)
              status: Pendiente
              suggested_practice:
                - >-
                  Procesar archivos grandes usando streams y manejar
                  backpressure.
            - id: 3.4.5
              name: Buffer y Typed Arrays
              status: Pendiente
              suggested_practice:
                - Manipular binarios usando Buffer y Typed Arrays.
            - id: 3.4.6
              name: Native Streams vs. Userland Streams
              status: Pendiente
              suggested_practice:
                - Comparar streams nativos y de usuario en Node.js.
        - number: 5
          status: Pendiente
          name: Optimizaciones de Rendimiento y Debugging en Node.js
          subtopics:
            - id: 3.5.1
              name: "Profiling (perf_hooks, Chrome DevTools)"
              status: Pendiente
              suggested_practice:
                - >-
                  Usar perf_hooks y DevTools para identificar cuellos de
                  botella.
            - id: 3.5.2
              name: "Análisis de Memoria (Heap snapshots, detección de fugas)"
              status: Pendiente
              suggested_practice:
                - Tomar y analizar heap snapshots para detectar fugas.
            - id: 3.5.3
              name: "Benchmarking (autocannon, wrk)"
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar el rendimiento de dos implementaciones usando
                  autocannon.
            - id: 3.5.4
              name: "Manejo de Errores y Logging Avanzado (Pino, Winston)"
              status: Pendiente
              suggested_practice:
                - Configurar Pino o Winston para logging estructurado.
            - id: 3.5.5
              name: Thread-safe patterns y race conditions
              status: Pendiente
              suggested_practice:
                - Simular race conditions y aplicar patrones thread-safe.
        - number: 6
          status: Pendiente
          name: >-
            Contenedorización (Docker) y Orquestación (Kubernetes) para
            Aplicaciones Node.js
          subtopics:
            - id: 3.6.1
              name: Dockerfile para Node.js y optimización de imágenes
              status: Pendiente
              suggested_practice:
                - >-
                  Crear un `Dockerfile` optimizado para una aplicación Node.js,
                  utilizando imágenes base apropiadas (`node:lts-alpine`).
                - >-
                  Implementar `multi-stage builds` para reducir el tamaño de la
                  imagen final, separando las dependencias de desarrollo y
                  producción.
                - >-
                  Configurar variables de entorno, volúmenes y user/group en el
                  `Dockerfile` para seguridad y configurabilidad.
            - id: 3.6.2
              name: Gestión avanzada de dependencias en entornos conteinerizados
              status: Pendiente
              suggested_practice:
                - >-
                  Comparar el uso de `npm ci` vs `npm install` en un entorno
                  Docker para builds reproducibles.
                - >-
                  Implementar estrategias de caching (Docker build cache,
                  multi-stage builds) para las dependencias de Node.js en
                  Docker.
                - >-
                  Optimizar el proceso de instalación de dependencias para
                  reducir el tiempo de construcción de la imagen, considerando
                  `COPY --from`.
            - id: 3.6.3
              name: Configuración de Kubernetes para aplicaciones Node.js
              status: Pendiente
              suggested_practice:
                - >-
                  Desplegar una aplicación Node.js en un cluster de Kubernetes
                  (Minikube, Kind, GKE, EKS).
                - >-
                  Definir `Deployments`, `Services`, y `Ingresses` para la
                  aplicación, exponiendo puertos y rutas.
                - >-
                  Configurar `liveness` y `readiness probes` para asegurar la
                  salud de los pods de la aplicación y manejar
                  reinicios/despliegues.
                - >-
                  Implementar `Horizontal Pod Autoscaler` (HPA) para escalado
                  automático basado en métricas.
            - id: 3.6.4
              name: Consideraciones de rendimiento y recursos en contenedores
              status: Pendiente
              suggested_practice:
                - >-
                  Ajustar los límites de CPU y memoria (`requests` y `limits`)
                  para contenedores de Node.js en Kubernetes y observar su
                  impacto.
                - >-
                  Analizar el impacto del sistema de archivos y las operaciones
                  de E/S en el rendimiento de la aplicación conteinerizada.
                - >-
                  Optimizar la configuración de recursos para maximizar la
                  eficiencia y prevenir `OOMKilled`.
            - id: 3.6.5
              name: Patrones Serverless Avanzados para Node.js
              status: Pendiente
              suggested_practice:
                - >-
                  Desplegar una función Node.js en un proveedor Serverless (AWS
                  Lambda, Google Cloud Functions, Azure Functions) utilizando
                  TypeScript.
                - >-
                  Implementar estrategias para mitigar y manejar `cold starts`
                  en funciones serverless (ej. provisioned concurrency, mantener
                  lambdas 'calientes').
                - >-
                  Configurar eventos y triggers complejos para funciones
                  serverless (API Gateway, SQS, S3, DynamoDB Streams).
        - number: 7
          status: Pendiente
          name: Seguridad en Aplicaciones Node.js
          subtopics:
            - id: 3.7.1
              name: "Vulnerabilidades Comunes (Inyección SQL, XSS, CSRF)"
              status: Pendiente
              suggested_practice:
                - Simular ataques comunes y aplicar mitigaciones.
            - id: 3.7.2
              name: Protección con Helmet.js
              status: Pendiente
              suggested_practice:
                - Integrar Helmet.js y analizar los headers de seguridad.
            - id: 3.7.3
              name: >-
                Autenticación/Autorización Avanzadas (JWT, OAuth 2.0, OpenID
                Connect)
              status: Pendiente
              suggested_practice:
                - Implementar autenticación JWT y OAuth en una API.
            - id: 3.7.4
              name: Manejo Seguro de Secretos
              status: Pendiente
              suggested_practice:
                - >-
                  Configurar variables de entorno seguras y rotación de
                  secretos.
            - id: 3.7.5
              name: >-
                Seguridad en dependencias (npm audit, Snyk, supply chain
                attacks)
              status: Pendiente
              suggested_practice:
                - Auditar dependencias y corregir vulnerabilidades reportadas.
    - id: 4
      title: Desarrollo de Aplicaciones Avanzadas con Node.js y TypeScript
      topics:
        - number: 1
          status: Pendiente
          name: Arquitecturas de Microservicios con Node.js y TypeScript
          subtopics:
            - id: 4.1.1
              name: Principios (desacoplamiento)
              status: Pendiente
              suggested_practice:
                - >-
                  Diseñar un microservicio desacoplado y documentar sus
                  dependencias.
            - id: 4.1.2
              name: "Comunicación (REST, gRPC, Message Queues)"
              status: Pendiente
              suggested_practice:
                - Implementar comunicación entre servicios usando REST y gRPC.
            - id: 4.1.3
              name: API Gateway
              status: Pendiente
              suggested_practice:
                - >-
                  Configurar un API Gateway y enrutar peticiones a
                  microservicios.
            - id: 4.1.4
              name: Service Discovery
              status: Pendiente
              suggested_practice:
                - >-
                  Simular service discovery dinámico en un entorno de
                  microservicios.
            - id: 4.1.5
              name: "Patrones de Resiliencia (Circuit Breaker, Retries)"
              status: Pendiente
              suggested_practice:
                - Implementar un patrón Circuit Breaker en Node.js.
            - id: 4.1.6
              name: "Monitoreo y Observabilidad (Prometheus, Grafana, Jaeger)"
              status: Pendiente
              suggested_practice:
                - >-
                  Instrumentar métricas y trazas en microservicios y
                  visualizarlas.
            - id: 4.1.7
              name: Event Sourcing y CQRS
              status: Pendiente
              suggested_practice:
                - Modelar un flujo de eventos y comandos usando CQRS.
            - id: 4.1.8
              name: "Mensajería asíncrona avanzada (RabbitMQ, Kafka)"
              status: Pendiente
              suggested_practice:
                - Integrar RabbitMQ o Kafka para comunicación asíncrona.
        - number: 2
          status: Pendiente
          name: Bases de Datos Avanzadas con Node.js
          subtopics:
            - id: 4.2.1
              name: >-
                ORM/ODM Profundo (TypeORM, Prisma: migraciones, relaciones,
                optimizaciones)
              status: Pendiente
              suggested_practice:
                - >-
                  Configurar migraciones y relaciones avanzadas con TypeORM o
                  Prisma.
            - id: 4.2.2
              name: "Bases de Datos NoSQL (MongoDB/Mongoose, Redis: caching, pub/sub)"
              status: Pendiente
              suggested_practice:
                - Implementar caching y pub/sub con Redis y MongoDB.
            - id: 4.2.3
              name: Diseño de Esquemas Eficientes
              status: Pendiente
              suggested_practice:
                - >-
                  Optimizar un esquema de base de datos para consultas
                  frecuentes.
            - id: 4.2.4
              name: Sharding y replicación avanzada
              status: Pendiente
              suggested_practice:
                - Simular sharding y replicación en una base de datos NoSQL.
            - id: 4.2.5
              name: Transacciones Distribuidas y Patrón Saga
              status: Pendiente
              suggested_practice:
                - >-
                  Investigar los desafíos de mantener la consistencia en
                  sistemas distribuidos con múltiples bases de datos.
                - >-
                  Implementar el patrón Saga para manejar transacciones
                  distribuidas en una arquitectura de microservicios, utilizando
                  un orquestador o coreografía.
                - >-
                  Diseñar e implementar mecanismos de compensación y reversión
                  (rollbacks) para los pasos de una Saga.
                - >-
                  Analizar las implicaciones de la consistencia eventual en
                  sistemas basados en Sagas.
        - number: 3
          status: Pendiente
          name: Testing Avanzado de Aplicaciones Node.js y TypeScript
          subtopics:
            - id: 4.3.1
              name: "Estrategias (Unit, Integration, E2E)"
              status: Pendiente
              suggested_practice:
                - >-
                  Diseñar pruebas unitarias, de integración y E2E para un
                  microservicio.
            - id: 4.3.2
              name: "Frameworks de Testing (Jest, Vitest, Supertest, Cypress)"
              status: Pendiente
              suggested_practice:
                - Comparar frameworks de testing en un mismo módulo.
            - id: 4.3.3
              name: "Mocks, Stubs y Spies (uso avanzado), Test Doubles"
              status: Pendiente
              suggested_practice:
                - Implementar mocks y spies avanzados en pruebas de integración.
            - id: 4.3.4
              name: Generación de Datos de Prueba (Faker.js)
              status: Pendiente
              suggested_practice:
                - Generar datos de prueba realistas con Faker.js.
            - id: 4.3.5
              name: >-
                Test-Driven Development (TDD) y Behavior-Driven Development
                (BDD)
              status: Pendiente
              suggested_practice:
                - Desarrollar una funcionalidad usando TDD y BDD.
            - id: 4.3.6
              name: "Contract Testing (Pact, Dredd)"
              status: Pendiente
              suggested_practice:
                - Validar contratos de APIs con Pact o Dredd.
        - number: 4
          status: Pendiente
          name: GraphQL con Node.js y TypeScript
          subtopics:
            - id: 4.4.1
              name: >-
                Conceptos Avanzados (Schemas, Resolvers, Directives,
                Subscriptions)
              status: Pendiente
              suggested_practice:
                - >-
                  Definir un esquema GraphQL avanzado con directivas y
                  suscripciones.
            - id: 4.4.2
              name: Implementación (Apollo Server/Yoga)
              status: Pendiente
              suggested_practice:
                - Implementar una API GraphQL con Apollo Server y Yoga.
            - id: 4.4.3
              name: Federation y Stitching
              status: Pendiente
              suggested_practice:
                - Federar múltiples servicios GraphQL y usar stitching.
            - id: 4.4.4
              name: "Optimización de Rendimiento (N+1 problem, DataLoader)"
              status: Pendiente
              suggested_practice:
                - Resolver el problema N+1 usando DataLoader.
            - id: 4.4.5
              name: Persisted Queries y seguridad en GraphQL
              status: Pendiente
              suggested_practice:
                - Implementar persisted queries y analizar riesgos de seguridad.
        - number: 5
          status: Pendiente
          name: Despliegue y CI/CD para Aplicaciones Node.js
          subtopics:
            - id: 4.5.1
              name: "Estrategias de Despliegue (Blue/Green, Canary)"
              status: Pendiente
              suggested_practice:
                - >-
                  Simular despliegues blue/green y canary en un entorno de
                  pruebas.
            - id: 4.5.2
              name: "CI/CD Pipelines (GitHub Actions, GitLab CI)"
              status: Pendiente
              suggested_practice:
                - >-
                  Configurar un pipeline CI/CD con pruebas y despliegue
                  automático.
            - id: 4.5.3
              name: >-
                Serverless (AWS Lambda, Azure Functions, Google Cloud Functions:
                diseño de funciones, Cold Starts)
              status: Pendiente
              suggested_practice:
                - Desplegar una función serverless y medir el cold start.
            - id: 4.5.4
              name: Monitoreo y Alerting Post-Despliegue
              status: Pendiente
              suggested_practice:
                - Configurar alertas y monitoreo post-despliegue.
            - id: 4.5.5
              name: Feature Flags y despliegue progresivo
              status: Pendiente
              suggested_practice:
                - Implementar feature flags y realizar un despliegue progresivo.
            - id: 4.5.6
              name: Infraestructura como Código (IaC) con Node.js/TypeScript
              status: Pendiente
              suggested_practice:
                - >-
                  Aprender los conceptos básicos de IaC (idempotencia, estado,
                  versiones) y sus beneficios para la automatización de
                  infraestructura.
                - >-
                  Elegir una herramienta de IaC (Terraform, AWS CDK, Pulumi) y
                  familiarizarse con su sintaxis y flujo de trabajo.
                - >-
                  Crear una infraestructura simple (ej. un VPC, subnets, un
                  grupo de seguridad) utilizando IaC.
                - >-
                  Automatizar el despliegue de infraestructura de Node.js (ej.
                  un cluster ECS/EKS, una base de datos RDS) utilizando IaC en
                  un pipeline CI/CD.
    - id: 5
      title: Habilidades de Experto y Preparación para Entrevistas
      topics:
        - number: 1
          status: Pendiente
          name: Debugging y Resolución de Problemas (Troubleshooting) Avanzado
          subtopics:
            - id: 5.1.1
              name: Estrategias para depurar aplicaciones complejas
              status: Pendiente
              suggested_practice:
                - Depurar una app Node.js compleja usando breakpoints y logs.
            - id: 5.1.2
              name: Uso de herramientas de monitoreo y logs
              status: Pendiente
              suggested_practice:
                - Configurar y analizar logs y métricas en producción.
            - id: 5.1.3
              name: Análisis de 'post-mortems'
              status: Pendiente
              suggested_practice:
                - Realizar un post-mortem de un incidente simulado.
            - id: 5.1.4
              name: Análisis de core dumps y crash dumps
              status: Pendiente
              suggested_practice:
                - Analizar un core dump generado por un crash en Node.js.
        - number: 2
          status: Pendiente
          name: Revisión de Código (Code Review) y Buenas Prácticas
          subtopics:
            - id: 5.2.1
              name: Cómo realizar code reviews efectivos
              status: Pendiente
              suggested_practice:
                - Participar en code reviews y documentar feedback constructivo.
            - id: 5.2.2
              name: >-
                Principios SOLID, DRY, KISS, Clean Code y Clean Architecture en
                Node.js/TypeScript
              status: Pendiente
              suggested_practice:
                - Refactorizar código aplicando principios SOLID y Clean Code.
            - id: 5.2.3
              name: Automatización de code reviews (herramientas y bots)
              status: Pendiente
              suggested_practice:
                - Configurar una herramienta de automatización de code reviews.
        - number: 3
          status: Pendiente
          name: Diseño de Sistemas (System Design) con Node.js
          subtopics:
            - id: 5.3.1
              name: Preparación para entrevistas de System Design
              status: Pendiente
              suggested_practice:
                - >-
                  Simular una entrevista de system design y justificar
                  decisiones.
            - id: 5.3.2
              name: Patrones de Diseño Comunes en System Design
              status: Pendiente
              suggested_practice:
                - >-
                  Estudiar y aplicar patrones de escalabilidad como Load
                  Balancing (balanceo de carga), Caching (caché distribuido),
                  Sharding (fragmentación) y Replication (replicación de datos).
                - >-
                  Comprender y explicar patrones de alta disponibilidad como
                  Failover (conmutación por error) y Leader-Follower.
                - >-
                  Analizar el uso de Message Queues (colas de mensajes) y Event
                  Streams (flujos de eventos) para comunicación y
                  desacoplamiento asíncrono.
                - >-
                  Discutir y ejemplificar patrones de seguridad (ej. OAuth, JWT,
                  mTLS) en el diseño de sistemas distribuidos.
                - >-
                  Aplicar estos patrones en el diseño de arquitecturas de
                  sistemas para resolver problemas específicos.
            - id: 5.3.3
              name: "Escalabilidad, disponibilidad, consistencia, tolerancia a fallos"
              status: Pendiente
              suggested_practice:
                - >-
                  Diseñar un sistema que cumpla requisitos de escalabilidad y
                  tolerancia a fallos.
            - id: 5.3.4
              name: Casos de estudio
              status: Pendiente
              suggested_practice:
                - Analizar un caso de estudio real y proponer mejoras.
            - id: 5.3.5
              name: Consistencia eventual y patrones CAP
              status: Pendiente
              suggested_practice:
                - >-
                  Explicar y ejemplificar el uso de patrones CAP en sistemas
                  distribuidos.
        - number: 4
          status: Pendiente
          name: Algoritmos y Estructuras de Datos Relevantes para JavaScript/Node.js
          subtopics:
            - id: 5.4.1
              name: >-
                Repaso de estructuras de datos clave (Arrays, Linked Lists,
                Trees, Graphs, Hash Tables)
              status: Pendiente
              suggested_practice:
                - Implementar y comparar estructuras de datos en JavaScript.
            - id: 5.4.2
              name: Algoritmos de búsqueda y ordenamiento
              status: Pendiente
              suggested_practice:
                - Comparar eficiencia de algoritmos de búsqueda y ordenamiento.
            - id: 5.4.3
              name: Complejidad Big O y optimización de algoritmos
              status: Pendiente
              suggested_practice:
                - Analizar y optimizar la complejidad de un algoritmo dado.
            - id: 5.4.4
              name: Resolución de problemas algorítmicos comunes
              status: Pendiente
              suggested_practice:
                - Resolver problemas de plataformas como LeetCode o HackerRank.
            - id: 5.4.5
              name: Algoritmos concurrentes y estructuras lock-free
              status: Pendiente
              suggested_practice:
                - >-
                  Implementar un algoritmo concurrente y analizar condiciones de
                  carrera.
        - number: 5
          status: Pendiente
          name: Preparación para Entrevistas Técnicas Avanzadas
          subtopics:
            - id: 5.5.1
              name: "Preguntas profundas sobre JavaScript (Event Loop, V8, closures)"
              status: Pendiente
              suggested_practice:
                - >-
                  Responder preguntas técnicas avanzadas sobre el Event Loop y
                  V8.
            - id: 5.5.2
              name: "TypeScript (tipos complejos, decorators)"
              status: Pendiente
              suggested_practice:
                - >-
                  Explicar y ejemplificar tipos complejos y decoradores en
                  TypeScript.
            - id: 5.5.3
              name: "Node.js (Event Loop, libuv, Thread Pool)"
              status: Pendiente
              suggested_practice:
                - Describir el funcionamiento interno del Event Loop y libuv.
            - id: 5.5.4
              name: Diseño de APIs/microservicios/seguridad
              status: Pendiente
              suggested_practice:
                - Diseñar una API segura y escalable para un caso de entrevista.
            - id: 5.5.5
              name: >-
                Estrategias para responder preguntas de comportamiento y
                liderazgo técnico
              status: Pendiente
              suggested_practice:
                - >-
                  Practicar respuestas a preguntas de liderazgo y
                  comportamiento.
            - id: 5.5.6
              name: Preguntas de diseño de sistemas distribuidos y cloud-native
              status: Pendiente
              suggested_practice:
                - >-
                  Resolver preguntas de diseño de sistemas distribuidos en
                  entrevistas.
