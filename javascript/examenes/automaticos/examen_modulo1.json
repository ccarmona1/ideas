[
  {
    "question": "¿Cuál es el propósito principal del Abstract Syntax Tree (AST) en el motor V8 de JavaScript?",
    "options": [
      "a) Ejecutar directamente el código fuente sin transformaciones.",
      "b) Representar la estructura sintáctica del código para posteriores fases de interpretación y optimización.",
      "c) Optimizar el uso de memoria durante la ejecución.",
      "d) Controlar el acceso a variables globales."
    ],
    "answer": "b",
    "explanation": "El AST es una representación estructurada del código fuente que permite al motor analizar, interpretar y optimizar el código antes de su ejecución.",
    "invalidOptions": {
      "a": "El motor no ejecuta el código fuente directamente; primero lo transforma en estructuras intermedias como el AST.",
      "c": "La optimización de memoria no es el objetivo principal del AST, sino del garbage collector y otros mecanismos.",
      "d": "El AST no controla el acceso a variables globales; solo representa la estructura del código."
    }
  },
  {
    "question": "¿Qué componente de V8 es responsable de la compilación optimizada de código JavaScript?",
    "options": [
      "a) Ignition",
      "b) TurboFan",
      "c) Snapshot Serializer",
      "d) Mark-Sweep Collector"
    ],
    "answer": "b",
    "explanation": "TurboFan es el compilador optimizador de V8, encargado de generar código máquina altamente optimizado a partir del código JavaScript.",
    "invalidOptions": {
      "a": "Ignition es el intérprete, no el compilador optimizador.",
      "c": "Snapshot Serializer se encarga de serializar el estado inicial del heap, no de compilar código.",
      "d": "Mark-Sweep Collector es parte del garbage collector, no de la compilación."
    }
  },
  {
    "question": "¿Cuál de las siguientes afirmaciones sobre el Garbage Collector generacional en V8 es correcta?",
    "options": [
      "a) Todos los objetos se recolectan en una sola fase sin distinción de antigüedad.",
      "b) Los objetos jóvenes y viejos se gestionan en espacios separados para optimizar la recolección.",
      "c) Solo los objetos globales son recolectados.",
      "d) El GC solo se ejecuta al cerrar el navegador."
    ],
    "answer": "b",
    "explanation": "El GC generacional separa objetos jóvenes y viejos, permitiendo recolecciones más rápidas y eficientes.",
    "invalidOptions": {
      "a": "El GC generacional distingue entre objetos jóvenes y viejos para optimizar la recolección.",
      "c": "El GC recolecta todos los objetos no referenciados, no solo los globales.",
      "d": "El GC se ejecuta periódicamente, no solo al cerrar el navegador."
    }
  },
  {
    "question": "¿Qué técnica utiliza V8 para acelerar el acceso a propiedades de objetos repetidamente accedidas?",
    "options": [
      "a) Inline Caching",
      "b) Hoisting",
      "c) Temporal Dead Zone",
      "d) Closure Binding"
    ],
    "answer": "a",
    "explanation": "Inline Caching almacena información sobre accesos previos a propiedades, acelerando futuras búsquedas.",
    "invalidOptions": {
      "b": "Hoisting se refiere al comportamiento de elevación de declaraciones, no a la optimización de accesos a propiedades.",
      "c": "Temporal Dead Zone es un concepto relacionado con let/const, no con optimización de propiedades.",
      "d": "Closure Binding se refiere al alcance de variables, no a la optimización de accesos a propiedades."
    }
  },
  {
    "question": "¿Cuál es el efecto de la desoptimización (deopt) en el pipeline de V8?",
    "options": [
      "a) Mejora el rendimiento del código optimizado.",
      "b) Reconvierte el código optimizado a una versión menos optimizada ante ciertos patrones de ejecución.",
      "c) Elimina el código fuente del heap.",
      "d) Incrementa el tamaño del AST."
    ],
    "answer": "b",
    "explanation": "La desoptimización ocurre cuando el motor detecta que las suposiciones hechas durante la optimización ya no son válidas, por lo que regresa a una versión menos optimizada del código.",
    "invalidOptions": {
      "a": "La desoptimización reduce el rendimiento, no lo mejora.",
      "c": "No elimina el código fuente del heap; solo cambia la versión del código ejecutado.",
      "d": "No afecta el tamaño del AST, que ya fue generado en fases previas."
    }
  },
  {
    "question": "¿Qué diferencia clave existe entre el contexto de ejecución global y el de función en JavaScript?",
    "options": [
      "a) El contexto global no tiene acceso a variables locales.",
      "b) El contexto de función crea un nuevo Lexical Environment para cada invocación.",
      "c) Ambos comparten el mismo Variable Environment.",
      "d) El contexto global se destruye tras cada llamada de función."
    ],
    "answer": "b",
    "explanation": "Cada función invocada genera su propio Lexical Environment, aislando variables locales y parámetros.",
    "invalidOptions": {
      "a": "El contexto global tiene acceso a variables locales si estas son accesibles en el scope.",
      "c": "El Variable Environment es diferente para cada contexto de ejecución.",
      "d": "El contexto global persiste a lo largo de la ejecución del programa, no se destruye con cada función."
    }
  },
  {
    "question": "¿Cuál es el resultado de acceder a una variable declarada con let antes de su inicialización dentro de su scope?",
    "options": [
      "a) undefined",
      "b) ReferenceError",
      "c) null",
      "d) 0"
    ],
    "answer": "b",
    "explanation": "El acceso a variables en la Temporal Dead Zone (TDZ) antes de su inicialización produce ReferenceError.",
    "invalidOptions": {
      "a": "No se obtiene 'undefined' porque la variable no ha sido inicializada aún.",
      "c": "No se asigna 'null' automáticamente; la variable está en TDZ.",
      "d": "No se asigna el valor '0'; la variable simplemente no está disponible."
    }
  },
  {
    "question": "¿Qué ocurre si se utiliza 'this' dentro de una función flecha definida en el contexto global?",
    "options": [
      "a) 'this' apunta al objeto global.",
      "b) 'this' es undefined en modo estricto.",
      "c) 'this' se hereda léxicamente del contexto de declaración.",
      "d) 'this' siempre apunta a window."
    ],
    "answer": "c",
    "explanation": "Las arrow functions no tienen su propio 'this', lo heredan léxicamente del contexto donde fueron declaradas.",
    "invalidOptions": {
      "a": "'this' no apunta al objeto global en funciones flecha.",
      "b": "'this' no es undefined, se hereda del contexto léxico.",
      "d": "'this' no siempre apunta a window, depende del contexto de declaración."
    }
  },
  {
    "question": "¿Cuál es el propósito de los Hidden Classes en V8?",
    "options": [
      "a) Mejorar la seguridad de los objetos.",
      "b) Optimizar el acceso a propiedades mediante la creación de estructuras internas de clases ocultas.",
      "c) Permitir la herencia múltiple.",
      "d) Facilitar la serialización de objetos."
    ],
    "answer": "b",
    "explanation": "Los Hidden Classes permiten a V8 optimizar el acceso a propiedades creando estructuras internas similares a clases.",
    "invalidOptions": {
      "a": "No están diseñadas principalmente para mejorar la seguridad.",
      "c": "No permiten la herencia múltiple, eso es tarea de los prototipos.",
      "d": "No facilitan la serialización, esa no es su función."
    }
  },
  {
    "question": "¿Qué sucede si se usa 'eval' en modo estricto?",
    "options": [
      "a) Puede crear variables en el scope local de la función que lo invoca.",
      "b) Solo puede crear variables en su propio scope, no en el scope local de la función invocadora.",
      "c) Eval no está permitido en modo estricto.",
      "d) Eval ejecuta código en el contexto global siempre."
    ],
    "answer": "b",
    "explanation": "En modo estricto, eval crea variables solo en su propio scope, no en el scope local de la función invocadora.",
    "invalidOptions": {
      "a": "No puede crear variables en el scope local de la función que lo invoca.",
      "c": "Eval está permitido, pero con restricciones en modo estricto.",
      "d": "No ejecuta necesariamente en el contexto global."
    }
  },
  {
    "question": "¿Cuál es la diferencia principal entre 'Object.create()' y el operador 'new' en la creación de objetos?",
    "options": [
      "a) 'Object.create()' permite especificar el prototipo del nuevo objeto explícitamente.",
      "b) Ambos crean objetos con el mismo prototipo por defecto.",
      "c) 'new' no puede inicializar propiedades.",
      "d) 'Object.create()' ejecuta el constructor automáticamente."
    ],
    "answer": "a",
    "explanation": "'Object.create()' permite definir explícitamente el prototipo del nuevo objeto, mientras que 'new' utiliza el prototipo de la función constructora.",
    "invalidOptions": {
      "b": "No, 'new' crea un objeto con el prototipo de la función constructora.",
      "c": "'new' sí puede inicializar propiedades a través del constructor.",
      "d": "No, 'Object.create()' no ejecuta el constructor, solo establece el prototipo."
    }
  },
  {
    "question": "¿Qué patrón de diseño permite la composición de funcionalidades en JavaScript sin herencia múltiple?",
    "options": [
      "a) Mixins",
      "b) Decorators",
      "c) Singleton",
      "d) Factory"
    ],
    "answer": "a",
    "explanation": "Los mixins permiten componer funcionalidades en objetos sin recurrir a la herencia múltiple.",
    "invalidOptions": {
      "b": "Los decorators son para modificar el comportamiento de clases o métodos, no son un patrón de composición de funcionalidades.",
      "c": "El singleton asegura una única instancia, no es un patrón de composición.",
      "d": "El factory es un patrón de creación de objetos, no de composición de funcionalidades."
    }
  },
  {
    "question": "¿Cuál es la diferencia entre un método enumerable y uno no enumerable en JavaScript?",
    "options": [
      "a) Los métodos enumerables pueden ser iterados en bucles for...in, los no enumerables no.",
      "b) Los métodos no enumerables son accesibles solo desde el prototipo.",
      "c) Los métodos enumerables no pueden ser sobrescritos.",
      "d) No existe diferencia."
    ],
    "answer": "a",
    "explanation": "Las propiedades enumerables aparecen en iteraciones for...in, mientras que las no enumerables no.",
    "invalidOptions": {
      "b": "Los métodos no enumerables no son accesibles en absoluto desde el prototipo.",
      "c": "Los métodos enumerables sí pueden ser sobrescritos.",
      "d": "Sí existe una diferencia, relacionada con la iteración en bucles."
    }
  },
  {
    "question": "¿Qué ocurre si se define una propiedad en un objeto con writable: false y configurable: false?",
    "options": [
      "a) La propiedad puede ser eliminada pero no modificada.",
      "b) La propiedad no puede ser modificada ni eliminada.",
      "c) La propiedad puede ser modificada pero no eliminada.",
      "d) La propiedad es enumerable por defecto."
    ],
    "answer": "b",
    "explanation": "Una propiedad con writable: false y configurable: false no puede ser modificada ni eliminada.",
    "invalidOptions": {
      "a": "No puede ser eliminada, ya que también es non-configurable.",
      "c": "No puede ser modificada, ya que es non-writable.",
      "d": "No tiene por qué ser enumerable, depende de cómo se defina la propiedad."
    }
  },
  {
    "question": "¿Cuál es el propósito de los Proxies en JavaScript moderno?",
    "options": [
      "a) Permitir la interceptación y redefinición de operaciones fundamentales sobre objetos.",
      "b) Mejorar la performance de los iteradores.",
      "c) Serializar objetos complejos.",
      "d) Implementar herencia múltiple."
    ],
    "answer": "a",
    "explanation": "Los Proxies permiten interceptar y redefinir operaciones como lectura, escritura y enumeración de propiedades.",
    "invalidOptions": {
      "b": "No están diseñados específicamente para mejorar la performance de los iteradores.",
      "c": "No son utilizados principalmente para serializar objetos complejos.",
      "d": "No implementan herencia múltiple, eso es tarea de los prototipos."
    }
  },
  {
    "question": "¿Qué sucede si se utiliza 'with' en modo estricto?",
    "options": [
      "a) 'with' es ignorado por el motor.",
      "b) Lanza un SyntaxError.",
      "c) Solo afecta al scope global.",
      "d) Permite redefinir variables globales."
    ],
    "answer": "b",
    "explanation": "El uso de 'with' en modo estricto está prohibido y lanza un SyntaxError.",
    "invalidOptions": {
      "a": "'with' no es ignorado, está prohibido en modo estricto.",
      "c": "Afecta a todo el bloque, no solo al scope global.",
      "d": "No permite redefinir variables globales, eso también está prohibido."
    }
  },
  {
    "question": "¿Cuál es la diferencia entre el scope de una variable declarada con var y una con let?",
    "options": [
      "a) 'var' tiene scope de bloque, 'let' tiene scope de función.",
      "b) 'var' tiene scope de función, 'let' tiene scope de bloque.",
      "c) Ambas tienen scope global.",
      "d) No existe diferencia."
    ],
    "answer": "b",
    "explanation": "'var' tiene scope de función, mientras que 'let' tiene scope de bloque.",
    "invalidOptions": {
      "a": "'var' no tiene scope de bloque, eso es exclusivo de 'let' y 'const'.",
      "c": "No, ambas tienen scope diferente dependiendo de cómo y dónde se declaren.",
      "d": "Sí existe una diferencia importante relacionada con el scope."
    }
  },
  {
    "question": "¿Qué ocurre si se define una función con el mismo nombre dos veces en el mismo scope en modo estricto?",
    "options": [
      "a) La última definición sobrescribe la anterior sin advertencia.",
      "b) Lanza un SyntaxError.",
      "c) Ambas funciones coexisten.",
      "d) Solo la primera definición es válida."
    ],
    "answer": "b",
    "explanation": "En modo estricto, definir dos funciones con el mismo nombre en el mismo scope lanza un SyntaxError.",
    "invalidOptions": {
      "a": "No, en modo estricto esto no es permitido.",
      "c": "No coexisten, una sobrescribe a la otra.",
      "d": "No, ambas no pueden ser válidas al mismo tiempo."
    }
  },
  {
    "question": "¿Cuál es la diferencia entre el event loop del navegador y el de Node.js?",
    "options": [
      "a) El navegador no tiene event loop.",
      "b) Node.js tiene fases adicionales como timers y poll.",
      "c) Ambos funcionan exactamente igual.",
      "d) El event loop de Node.js no soporta microtasks."
    ],
    "answer": "b",
    "explanation": "El event loop de Node.js tiene fases adicionales como timers, poll, check, etc., a diferencia del navegador.",
    "invalidOptions": {
      "a": "El navegador tiene un event loop, necesario para manejar eventos y callbacks.",
      "c": "No, hay diferencias en cómo manejan las tareas y los eventos.",
      "d": "El event loop de Node.js sí soporta microtasks, como las promesas."
    }
  }
]
