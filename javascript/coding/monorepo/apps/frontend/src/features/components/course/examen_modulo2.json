[
  {
    "question": "¿Cuál es la diferencia principal entre 'any' y 'unknown' en TypeScript?",
    "options": [
      "a) 'any' permite cualquier operación sin comprobación de tipos, 'unknown' requiere comprobación de tipo antes de operar.",
      "b) 'unknown' permite cualquier operación sin comprobación de tipos, 'any' requiere comprobación de tipo antes de operar.",
      "c) Ambos son equivalentes y permiten cualquier operación.",
      "d) 'any' solo existe en JavaScript, 'unknown' solo en TypeScript."
    ],
    "answer": "a",
    "explanation": "'any' desactiva el sistema de tipos, permitiendo cualquier operación sin comprobación. 'unknown' obliga a comprobar el tipo antes de operar, aumentando la seguridad.",
    "invalidOptions": {
      "b": "Es al revés: 'unknown' requiere comprobación de tipo, 'any' no.",
      "c": "No son equivalentes; 'unknown' es más seguro que 'any'.",
      "d": "Ambos existen solo en TypeScript, no en JavaScript puro."
    }
  },
  {
    "question": "¿Cuál es el propósito de los type guards personalizados en TypeScript?",
    "options": [
      "a) Permiten al compilador refinar el tipo de una variable en tiempo de ejecución.",
      "b) Permiten definir tipos globales en el proyecto.",
      "c) Mejoran el rendimiento del código generado.",
      "d) Son equivalentes a las assertion functions."
    ],
    "answer": "a",
    "explanation": "Los type guards personalizados permiten al compilador refinar el tipo de una variable dentro de un bloque de código, mejorando la seguridad de tipos.",
    "invalidOptions": {
      "b": "No definen tipos globales, solo refinan tipos en contexto.",
      "c": "No afectan el rendimiento del código generado, solo la comprobación de tipos.",
      "d": "No son equivalentes; las assertion functions tienen otra finalidad."
    }
  },
  {
    "question": "¿Qué ocurre si se usa 'as const' en un array en TypeScript?",
    "options": [
      "a) El array se convierte en un tipo de solo lectura con valores literales.",
      "b) El array se convierte en un tipo 'any'.",
      "c) El array se convierte en un tipo 'unknown'.",
      "d) No tiene ningún efecto en el tipo del array."
    ],
    "answer": "a",
    "explanation": "'as const' convierte el array en un tipo de solo lectura y sus elementos en literales, útil para tuplas y valores inmutables.",
    "invalidOptions": {
      "b": "No convierte el array en 'any', sino en un tipo literal y readonly.",
      "c": "No convierte el array en 'unknown'.",
      "d": "Sí tiene efecto: cambia el tipo a readonly y literal."
    }
  },
  {
    "question": "¿Cuál es la diferencia principal entre una interface y un type alias en TypeScript?",
    "options": [
      "a) Las interfaces pueden ser extendidas y fusionadas, los type alias no.",
      "b) Los type alias pueden ser extendidos y fusionados, las interfaces no.",
      "c) Ambos son equivalentes en todas las capacidades.",
      "d) Los type alias solo existen en JavaScript."
    ],
    "answer": "a",
    "explanation": "Las interfaces pueden ser extendidas y fusionadas (declaration merging), mientras que los type alias no permiten merging y tienen limitaciones en extensión.",
    "invalidOptions": {
      "b": "Es al revés: las interfaces permiten merging y extensión, los type alias no.",
      "c": "No son equivalentes, tienen diferencias clave en extensión y merging.",
      "d": "Los type alias solo existen en TypeScript, no en JavaScript."
    }
  },
  {
    "question": "¿Qué hace un archivo .d.ts en un proyecto TypeScript?",
    "options": [
      "a) Define declaraciones de tipos para librerías y módulos.",
      "b) Ejecuta código en tiempo de compilación.",
      "c) Mejora el rendimiento del compilador.",
      "d) Permite la sobrecarga de funciones en JavaScript puro."
    ],
    "answer": "a",
    "explanation": "Los archivos .d.ts contienen solo declaraciones de tipos, permitiendo tipado para librerías externas o JS puro.",
    "invalidOptions": {
      "b": "No ejecutan código, solo declaran tipos.",
      "c": "No afectan el rendimiento del compilador directamente.",
      "d": "No permiten sobrecarga de funciones en JS puro, solo en TypeScript."
    }
  },
  {
    "question": "¿Cuál es el resultado de la siguiente función y por qué?\n\nfunction foo(bar: string | number): number {\n  if (typeof bar === 'string') {\n    return bar.length;\n  } else {\n    return bar;\n  }\n}\nfoo(10);\n",
    "options": [
      "a) 10, porque bar es un número y se retorna directamente.",
      "b) undefined, porque bar no tiene propiedad length.",
      "c) Error en tiempo de compilación.",
      "d) '2', porque la longitud de '10' es 2."
    ],
    "answer": "a",
    "explanation": "Cuando bar es un número, la función retorna el valor directamente, así que foo(10) retorna 10.",
    "invalidOptions": {
      "b": "Solo sería undefined si se intentara acceder a length de un número, pero el type guard lo evita.",
      "c": "No hay error en tiempo de compilación, el type guard es correcto.",
      "d": "No se convierte el número a string, se retorna el número."
    }
  },
  {
    "question": "¿Qué opción describe mejor el propósito de los assertion functions en TypeScript?",
    "options": [
      "a) Permiten forzar el tipo de una variable en tiempo de ejecución.",
      "b) Permiten al compilador saber que una condición es verdadera y refinar el tipo.",
      "c) Son funciones que lanzan errores en tiempo de ejecución.",
      "d) Son funciones que validan tipos en tiempo de ejecución."
    ],
    "answer": "b",
    "explanation": "Las assertion functions informan al compilador que una condición es verdadera, permitiendo el refinamiento de tipos.",
    "invalidOptions": {
      "a": "No fuerzan el tipo en tiempo de ejecución, solo informan al compilador.",
      "c": "No necesariamente lanzan errores, su objetivo es refinar tipos.",
      "d": "No validan tipos en tiempo de ejecución, solo afectan el análisis estático."
    }
  },
  {
    "question": "¿Cuál es la diferencia entre 'readonly' y 'const' en TypeScript?",
    "options": [
      "a) 'readonly' se usa en propiedades de objetos y 'const' en variables.",
      "b) 'readonly' impide la reasignación de variables, 'const' no.",
      "c) No hay diferencia, son equivalentes.",
      "d) 'readonly' solo existe en JavaScript."
    ],
    "answer": "a",
    "explanation": "'readonly' se aplica a propiedades de objetos y clases, mientras que 'const' se usa para variables a nivel de bloque.",
    "invalidOptions": {
      "b": "'readonly' no impide la reasignación de variables, solo de propiedades.",
      "c": "No son equivalentes, tienen usos distintos.",
      "d": "'readonly' solo existe en TypeScript, no en JavaScript puro."
    }
  },
  {
    "question": "¿Qué problemas puede causar el uso excesivo de 'any' en un proyecto TypeScript grande?",
    "options": [
      "a) Pérdida de seguridad de tipos y mayor riesgo de errores en tiempo de ejecución.",
      "b) Mejora la performance del compilador.",
      "c) Permite mejores sugerencias de autocompletado.",
      "d) No tiene ningún efecto negativo."
    ],
    "answer": "a",
    "explanation": "El uso excesivo de 'any' elimina las garantías de tipado, aumentando el riesgo de errores y dificultando el mantenimiento.",
    "invalidOptions": {
      "b": "No mejora la performance, puede incluso dificultar el análisis de tipos.",
      "c": "'any' reduce la calidad del autocompletado, no la mejora.",
      "d": "Sí tiene efectos negativos, especialmente en proyectos grandes."
    }
  },
  {
    "question": "¿Cuál es el propósito de los utility types nativos como Partial<T>, Pick<T, K> y Record<K, T> en TypeScript?",
    "options": [
      "a) Permiten manipular y transformar tipos de manera reutilizable y segura.",
      "b) Solo sirven para documentar el código.",
      "c) Mejoran el rendimiento en tiempo de ejecución.",
      "d) Son exclusivos de JavaScript."
    ],
    "answer": "a",
    "explanation": "Los utility types permiten crear nuevos tipos a partir de otros, facilitando la reutilización y la seguridad de tipos.",
    "invalidOptions": {
      "b": "No solo documentan, transforman tipos de forma segura.",
      "c": "No afectan el rendimiento en tiempo de ejecución, solo el tipado.",
      "d": "Son exclusivos de TypeScript, no de JavaScript."
    }
  },
  {
    "question": "¿Cuál es el propósito principal del archivo tsconfig.json en un proyecto TypeScript?",
    "options": [
      "a) Configurar las reglas de linting.",
      "b) Definir la configuración del compilador y las opciones del proyecto.",
      "c) Ejecutar scripts de prueba.",
      "d) Instalar dependencias automáticamente."
    ],
    "answer": "b",
    "explanation": "El archivo tsconfig.json define la configuración del compilador TypeScript y las opciones del proyecto, como rutas, strictness y módulos.",
    "invalidOptions": {
      "a": "Las reglas de linting se configuran en archivos como .eslintrc, no en tsconfig.json.",
      "c": "No ejecuta scripts de prueba, solo configura el compilador.",
      "d": "No instala dependencias, eso lo hace el gestor de paquetes."
    }
  },
  {
    "question": "¿Qué ocurre si se omite el tipo de retorno en una función TypeScript y la inferencia no es posible?",
    "options": [
      "a) El compilador asigna 'any' por defecto.",
      "b) El compilador lanza un error si no puede inferir el tipo.",
      "c) El tipo de retorno será 'void'.",
      "d) El compilador asigna 'unknown'."
    ],
    "answer": "a",
    "explanation": "Si TypeScript no puede inferir el tipo de retorno, asigna 'any' por defecto, lo que puede ser riesgoso.",
    "invalidOptions": {
      "b": "No lanza error, solo asigna 'any'.",
      "c": "'void' solo se asigna si la función no retorna nada explícitamente.",
      "d": "No asigna 'unknown' automáticamente."
    }
  },
  {
    "question": "¿Cuál es la diferencia entre 'interface' y 'abstract class' en TypeScript?",
    "options": [
      "a) Una interface no puede tener implementación, una abstract class sí.",
      "b) Ambas pueden tener implementación de métodos.",
      "c) Una abstract class no puede ser extendida.",
      "d) Una interface puede tener constructores."
    ],
    "answer": "a",
    "explanation": "Las interfaces solo definen la forma, mientras que las clases abstractas pueden tener implementación parcial de métodos.",
    "invalidOptions": {
      "b": "Solo las abstract class pueden tener implementación, no las interfaces.",
      "c": "Las abstract class sí pueden ser extendidas, de hecho es su propósito.",
      "d": "Las interfaces no pueden tener constructores."
    }
  },
  {
    "question": "¿Qué operador permite comprobar si un valor es de un tipo específico en tiempo de ejecución en TypeScript?",
    "options": [
      "a) typeof",
      "b) instanceof",
      "c) Ambos",
      "d) Ninguno"
    ],
    "answer": "c",
    "explanation": "'typeof' se usa para tipos primitivos y 'instanceof' para instancias de clases u objetos.",
    "invalidOptions": {
      "a": "Solo funciona para tipos primitivos.",
      "b": "Solo funciona para instancias de clases.",
      "d": "Ambos operadores pueden usarse en diferentes contextos."
    }
  },
  {
    "question": "¿Qué hace el modificador 'protected' en una clase TypeScript?",
    "options": [
      "a) Permite el acceso solo dentro de la clase y sus subclases.",
      "b) Permite el acceso solo dentro de la clase.",
      "c) Permite el acceso desde cualquier parte del código.",
      "d) Hace la propiedad inmutable."
    ],
    "answer": "a",
    "explanation": "'protected' permite el acceso a la propiedad o método solo desde la clase base y sus subclases.",
    "invalidOptions": {
      "b": "Eso corresponde a 'private'.",
      "c": "Eso corresponde a 'public'.",
      "d": "No tiene relación con la inmutabilidad."
    }
  },
  {
    "question": "¿Cuál es el propósito de los enums en TypeScript?",
    "options": [
      "a) Definir un conjunto de valores constantes con nombre.",
      "b) Crear tipos dinámicos en tiempo de ejecución.",
      "c) Mejorar la performance del compilador.",
      "d) Reemplazar las interfaces."
    ],
    "answer": "a",
    "explanation": "Los enums permiten definir un conjunto de valores constantes y legibles, facilitando el control de flujo y la documentación.",
    "invalidOptions": {
      "b": "No crean tipos dinámicos, son constantes.",
      "c": "No afectan la performance del compilador.",
      "d": "No reemplazan interfaces, tienen propósitos distintos."
    }
  },
  {
    "question": "¿Qué ocurre si se usa 'declare' en una variable TypeScript?",
    "options": [
      "a) Indica que la variable existe en tiempo de ejecución, pero no se genera código para ella.",
      "b) La variable se inicializa automáticamente.",
      "c) La variable es privada por defecto.",
      "d) Solo puede usarse en archivos JavaScript."
    ],
    "answer": "a",
    "explanation": "'declare' indica al compilador que la variable existe, pero no se genera código JavaScript para ella.",
    "invalidOptions": {
      "b": "No inicializa la variable, solo la declara para el tipado.",
      "c": "No afecta la visibilidad de la variable.",
      "d": "Solo se usa en TypeScript, no en JavaScript puro."
    }
  },
  {
    "question": "¿Cuál es la diferencia entre 'Partial<T>' y 'Required<T>' en TypeScript?",
    "options": [
      "a) 'Partial<T>' hace que todas las propiedades sean opcionales, 'Required<T>' las hace obligatorias.",
      "b) 'Partial<T>' elimina todas las propiedades, 'Required<T>' las elimina.",
      "c) Ambos hacen que las propiedades sean readonly.",
      "d) No hay diferencia."
    ],
    "answer": "a",
    "explanation": "'Partial<T>' convierte todas las propiedades en opcionales, 'Required<T>' las convierte en obligatorias.",
    "invalidOptions": {
      "b": "No eliminan propiedades, solo cambian su opcionalidad.",
      "c": "No afectan la mutabilidad, solo la opcionalidad.",
      "d": "Sí hay diferencia, son opuestos."
    }
  },
  {
    "question": "¿Qué hace el operador 'satisfies' en TypeScript?",
    "options": [
      "a) Verifica que un valor cumple con un tipo sin cambiar su inferencia.",
      "b) Convierte el valor al tipo especificado.",
      "c) Hace que el valor sea readonly.",
      "d) Solo funciona con enums."
    ],
    "answer": "a",
    "explanation": "'satisfies' permite comprobar que un valor cumple con un tipo, pero mantiene la inferencia original del valor.",
    "invalidOptions": {
      "b": "No convierte el valor, solo verifica el cumplimiento del tipo.",
      "c": "No afecta la mutabilidad.",
      "d": "Funciona con cualquier tipo, no solo enums."
    }
  },
  {
    "question": "¿Qué ocurre si se usa 'never' como tipo de retorno en una función?",
    "options": [
      "a) Indica que la función nunca retorna un valor (lanza error o bucle infinito).",
      "b) La función retorna undefined.",
      "c) La función retorna null.",
      "d) La función retorna cualquier tipo."
    ],
    "answer": "a",
    "explanation": "El tipo 'never' indica que la función no retorna nunca, ya sea por lanzar una excepción o por un bucle infinito.",
    "invalidOptions": {
      "b": "No retorna undefined, nunca retorna.",
      "c": "No retorna null, nunca retorna.",
      "d": "No puede retornar ningún tipo."
    }
  },
  {
    "question": "¿Cuál es el propósito de los type assertions (as) en TypeScript?",
    "options": [
      "a) Indicar al compilador que trate un valor como un tipo específico.",
      "b) Cambiar el tipo en tiempo de ejecución.",
      "c) Hacer que el valor sea readonly.",
      "d) Eliminar el valor en tiempo de compilación."
    ],
    "answer": "a",
    "explanation": "Los type assertions permiten al desarrollador indicar al compilador que trate un valor como un tipo específico, sin cambiar el valor en tiempo de ejecución.",
    "invalidOptions": {
      "b": "No cambia el tipo en tiempo de ejecución, solo afecta el análisis estático.",
      "c": "No afecta la mutabilidad.",
      "d": "No elimina el valor."
    }
  },
  {
    "question": "¿Qué ocurre si se usa 'extends' en una interfaz TypeScript?",
    "options": [
      "a) Permite que la interfaz herede propiedades de otra interfaz.",
      "b) Hace que la interfaz sea abstracta.",
      "c) Elimina las propiedades de la interfaz base.",
      "d) Solo funciona con clases."
    ],
    "answer": "a",
    "explanation": "'extends' permite que una interfaz herede propiedades de otra, facilitando la reutilización de tipos.",
    "invalidOptions": {
      "b": "No hace que la interfaz sea abstracta, solo hereda propiedades.",
      "c": "No elimina propiedades, las agrega.",
      "d": "También funciona con interfaces, no solo con clases."
    }
  },
  {
    "question": "¿Cuál es el propósito de los módulos en TypeScript?",
    "options": [
      "a) Organizar el código en archivos y espacios de nombres independientes.",
      "b) Mejorar la performance del compilador.",
      "c) Hacer que todas las variables sean globales.",
      "d) Eliminar la necesidad de interfaces."
    ],
    "answer": "a",
    "explanation": "Los módulos permiten organizar el código en archivos independientes, evitando la contaminación del espacio global y facilitando la reutilización.",
    "invalidOptions": {
      "b": "No afectan directamente la performance del compilador.",
      "c": "Evitan que las variables sean globales, no lo contrario.",
      "d": "No eliminan la necesidad de interfaces."
    }
  },
  {
    "question": "¿Qué ocurre si se usa 'keyof' en TypeScript?",
    "options": [
      "a) Obtiene un tipo que representa todas las claves de un objeto.",
      "b) Elimina todas las claves de un objeto.",
      "c) Hace que todas las claves sean opcionales.",
      "d) Solo funciona con arrays."
    ],
    "answer": "a",
    "explanation": "'keyof' obtiene un tipo que representa todas las claves de un objeto, útil para manipulación avanzada de tipos.",
    "invalidOptions": {
      "b": "No elimina claves, solo obtiene su tipo.",
      "c": "No cambia la opcionalidad.",
      "d": "Funciona con cualquier objeto, no solo arrays."
    }
  }
]
